/*
 * JFrTournamentOptions.java
 */

package info.vannier.gotha;

import com.toedter.calendar.JDateChooser;

import net.miginfocom.swing.MigLayout;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;

import ru.gofederation.gotha.model.RatingListType;
import ru.gofederation.gotha.util.GothaLocale;

import static ru.gofederation.gotha.ui.FrameBase.scaleFont;

/**
 *
 * @author  Luc Vannier
 */
public class JFrTournamentOptions extends JFrame {
    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;


    private static final int CRITERION_NAME = 0;
    private static final int CRITERION_SHORT_NAME = 1;
    private static final int CRITERION_DESCRIPTION = 2;

    private TournamentInterface tournament;

	private GothaLocale locale;

    private volatile boolean running = true;
    javax.swing.Timer timer = null;
    private void setupRefreshTimer() {
        ActionListener taskPerformer;
        taskPerformer = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (!running){
                    timer.stop();
                }
                try {
                    if (tournament.getLastTournamentModificationTime() > lastComponentsUpdateTime) {
                        updateAllViews();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrGamesResults.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        timer = new javax.swing.Timer((int) REFRESH_DELAY, taskPerformer);
        timer.start();
    }


    public JFrTournamentOptions(TournamentInterface tournament) throws RemoteException{
        super();

		this.locale = GothaLocale.getCurrentLocale();

        this.tournament = tournament;

        initComponents();
        customInitComponents();
        setupRefreshTimer();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        grpHdCorrection = new javax.swing.ButtonGroup();
        grpAbsentNBW = new javax.swing.ButtonGroup();
        grpAbsentMMS = new javax.swing.ButtonGroup();
        grpByeNBW = new javax.swing.ButtonGroup();
        grpByeMMS = new javax.swing.ButtonGroup();
        grpRandom = new javax.swing.ButtonGroup();
        grpDUDDUG = new javax.swing.ButtonGroup();
        grpDUDDLG = new javax.swing.ButtonGroup();
        grpSeedingFormer = new javax.swing.ButtonGroup();
        grpSeedingLatter = new javax.swing.ButtonGroup();
        dlgChangeSystem = new javax.swing.JDialog();
        rdbMcMahon = new javax.swing.JRadioButton();
        rdbSwiss = new javax.swing.JRadioButton();
        rdbSwissCat = new javax.swing.JRadioButton();
        lblNewSystem = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        btnDlgChangeSystemOK = new javax.swing.JButton();
        btnDlgChangeSystemCancel = new javax.swing.JButton();
        lblRecommended = new javax.swing.JLabel();
        ckbResetParameters = new javax.swing.JCheckBox();
        grpNewSystem = new javax.swing.ButtonGroup();
        grpHdBase = new javax.swing.ButtonGroup();
        dlgEditClubsGroups = new javax.swing.JDialog();
        btnDlgEditClubsGroupsClose = new javax.swing.JButton();
        scpClubs = new javax.swing.JScrollPane();
        lstClubs = new javax.swing.JList<>();
        jLabel41 = new javax.swing.JLabel();
        scpClubsGroups = new javax.swing.JScrollPane();
        lstClubsGroups = new javax.swing.JList<>();
        jLabel25 = new javax.swing.JLabel();
        scpClubsInSelectedGroup = new javax.swing.JScrollPane();
        lstClubsInSelectedGroup = new javax.swing.JList<>();
        jLabel42 = new javax.swing.JLabel();
        btnAddGroup = new javax.swing.JButton();
        btnRemoveGroup = new javax.swing.JButton();
        btnAddClub = new javax.swing.JButton();
        btnRemoveClub = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        tpnParameters = new javax.swing.JTabbedPane();
        pnlGen = new javax.swing.JPanel();
        pnlCategories = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnAdjustCategoryLimits = new javax.swing.JButton();
        txfNumberOfCategories = new JSpinner();
        pnlTournamentDetails = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txfShortName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txfName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txfLocation = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txfBeginDate = new JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        txfNumberOfRounds = new JSpinner();
        jLabel8 = new javax.swing.JLabel();
        txfEndDate = new JDateChooser();
        jLabel37 = new javax.swing.JLabel();
        txfDirector = new javax.swing.JTextField();
        lblSystemName = new javax.swing.JLabel();
        pnlMcMahon = new javax.swing.JPanel();
        lblMMBar = new javax.swing.JLabel();
        txfMMBar = new javax.swing.JTextField();
        lblMMFloor = new javax.swing.JLabel();
        txfMMFloor = new javax.swing.JTextField();
        lblMMZero = new javax.swing.JLabel();
        txfMMZero = new javax.swing.JTextField();
        pnlSpecialResults = new javax.swing.JPanel();
        rdbAbsentNBW0 = new javax.swing.JRadioButton();
        rdbAbsentNBW1 = new javax.swing.JRadioButton();
        rdbAbsentNBW2 = new javax.swing.JRadioButton();
        rdbAbsentMMS0 = new javax.swing.JRadioButton();
        rdbAbsentMMS1 = new javax.swing.JRadioButton();
        rdbAbsentMMS2 = new javax.swing.JRadioButton();
        rdbByeNBW0 = new javax.swing.JRadioButton();
        rdbByeNBW1 = new javax.swing.JRadioButton();
        rdbByeNBW2 = new javax.swing.JRadioButton();
        rdbByeMMS0 = new javax.swing.JRadioButton();
        rdbByeMMS1 = new javax.swing.JRadioButton();
        rdbByeMMS2 = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        ckbRoundDown = new javax.swing.JCheckBox();
        ckbCountNPG = new javax.swing.JCheckBox();
        btnChangeSystem = new javax.swing.JButton();
        pnlHan = new javax.swing.JPanel();
        lblHandicap = new javax.swing.JLabel();
        pnlHandicap = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txfNoHdRankThreshold = new javax.swing.JTextField();
        rdbHdCorrection0 = new javax.swing.JRadioButton();
        rdbHdCorrection1 = new javax.swing.JRadioButton();
        rdbHdCorrection2 = new javax.swing.JRadioButton();
        rdbHdCorrectionPlus1 = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        txfHdCeiling = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        rdbHdBaseMMS = new javax.swing.JRadioButton();
        rdbHdBaseRank = new javax.swing.JRadioButton();
        jLabel30 = new javax.swing.JLabel();
        rdbHdCorrection3 = new javax.swing.JRadioButton();
        pnlPla = new javax.swing.JPanel();
        cbxCrit1 = new javax.swing.JComboBox<>();
        cbxCrit2 = new javax.swing.JComboBox<>();
        cbxCrit3 = new javax.swing.JComboBox<>();
        cbxCrit4 = new javax.swing.JComboBox<>();
        pnlGlossary = new javax.swing.JPanel();
        scpGlossary = new javax.swing.JScrollPane();
        tblGlossary = new javax.swing.JTable();
        txaWarning = new javax.swing.JTextArea();
        pnlPai = new javax.swing.JPanel();
        pnlBase = new javax.swing.JPanel();
        ckbAvoidPairingSamePair = new javax.swing.JCheckBox();
        ckbBalanceWB = new javax.swing.JCheckBox();
        rdbNoRandom = new javax.swing.JRadioButton();
        rdbAcceptRandom = new javax.swing.JRadioButton();
        ckbDeterministic = new javax.swing.JCheckBox();
        pnlMain = new javax.swing.JPanel();
        ckbAvoidMixingCategories = new javax.swing.JCheckBox();
        ckbMinimizeScoreDifference = new javax.swing.JCheckBox();
        pnlDUDD = new javax.swing.JPanel();
        pnlDUDDUG = new javax.swing.JPanel();
        rdbDUDDUGTop = new javax.swing.JRadioButton();
        rdbDUDDUGMid = new javax.swing.JRadioButton();
        rdbDUDDUGBot = new javax.swing.JRadioButton();
        pnlDUDDLG = new javax.swing.JPanel();
        rdbDUDDLGTop = new javax.swing.JRadioButton();
        rdbDUDDLGMid = new javax.swing.JRadioButton();
        rdbDUDDLGBot = new javax.swing.JRadioButton();
        ckbCompensate = new javax.swing.JCheckBox();
        ckbAvoid2DUDD = new javax.swing.JCheckBox();
        jLabel40 = new javax.swing.JLabel();
        pnlSeeding = new javax.swing.JPanel();
        txfLastRoundForSeedSystem1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        pnlFormer = new javax.swing.JPanel();
        ckbAddSortOnRating = new javax.swing.JCheckBox();
        rdbFormerSplitAndRandom = new javax.swing.JRadioButton();
        rdbFormerSplitAndFold = new javax.swing.JRadioButton();
        rdbFormerSplitAndSlip = new javax.swing.JRadioButton();
        pnlLatter = new javax.swing.JPanel();
        rdbLatterSplitAndRandom = new javax.swing.JRadioButton();
        rdbLatterSplitAndFold = new javax.swing.JRadioButton();
        rdbLatterSplitAndSlip = new javax.swing.JRadioButton();
        pnlSecondary = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txfSeRankThreshold = new javax.swing.JTextField();
        ckbSeNbWinsThresholdActive = new javax.swing.JCheckBox();
        jLabel23 = new javax.swing.JLabel();
        txfSeCountry = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txfSeClub = new javax.swing.JTextField();
        ckbSeMinimizeHandicap = new javax.swing.JCheckBox();
        jLabel26 = new javax.swing.JLabel();
        ckbSeBarThresholdActive = new javax.swing.JCheckBox();
        jLabel28 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        txfSeClubsGroup = new javax.swing.JTextField();
        btnEditClubsGroups = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        pnlTPL = new javax.swing.JPanel();
        cbxTeamCrit1 = new javax.swing.JComboBox<>();
        cbxTeamCrit2 = new javax.swing.JComboBox<>();
        cbxTeamCrit3 = new javax.swing.JComboBox<>();
        cbxTeamCrit4 = new javax.swing.JComboBox<>();
        cbxTeamCrit5 = new javax.swing.JComboBox<>();
        cbxTeamCrit6 = new javax.swing.JComboBox<>();
        pnlTeamGlossary = new javax.swing.JPanel();
        scpTeamGlossary = new javax.swing.JScrollPane();
        tblTeamGlossary = new javax.swing.JTable();
        txaTeamWarning = new javax.swing.JTextArea();
        btnPrint = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();

        final Font smallFont = scaleFont(ckbAvoidMixingCategories, 0.8f);
        final Font smallItalicFont = smallFont.deriveFont(smallFont.getStyle() | Font.ITALIC);

        dlgChangeSystem.getContentPane().setLayout(new MigLayout("flowy, insets dialog, fill", null, "[]unrel[][][][][]unrel[]unrel[]"));

        ckbResetParameters.setText(locale.getString("tournament.reset.keep_system_reset_settings"));
        ckbResetParameters.addActionListener(this::ckbResetParametersActionPerformed);
        dlgChangeSystem.getContentPane().add(ckbResetParameters);

        lblNewSystem.setText(locale.getString("tournament.reset.new_system"));
        dlgChangeSystem.getContentPane().add(lblNewSystem, "gapbefore indent");

        grpNewSystem.add(rdbMcMahon);
        rdbMcMahon.setSelected(true);
        rdbMcMahon.setText(locale.getString("tournament.system.mcmahon"));
        rdbMcMahon.setToolTipText(locale.getString("tournament.system.mcmahon_tooltip"));
        dlgChangeSystem.getContentPane().add(rdbMcMahon, "gapbefore indent");

        grpNewSystem.add(rdbSwiss);
        rdbSwiss.setText(locale.getString("tournament.system.swiss"));
        rdbSwiss.setToolTipText(locale.getString("tournament.system.swiss_tooltip"));
        dlgChangeSystem.getContentPane().add(rdbSwiss, "gapbefore indent");

        grpNewSystem.add(rdbSwissCat);
        rdbSwissCat.setText(locale.getString("tournament.system.swiss_cat"));
        rdbSwissCat.setToolTipText(locale.getString("tournament.system.swiss_cat_tooltip"));
        dlgChangeSystem.getContentPane().add(rdbSwissCat, "gapbefore indent");

        lblRecommended.setText(locale.getString("tournament.system.swiss_cat_recommended"));
        dlgChangeSystem.getContentPane().add(lblRecommended, "gapbefore 40lp");

        jLabel19.setText(locale.getString("tournament.reset.change_system_will_reset_settings"));
        dlgChangeSystem.getContentPane().add(jLabel19);

        btnDlgChangeSystemOK.setText(locale.getString("btn.ok"));
        btnDlgChangeSystemOK.addActionListener(this::btnDlgChangeSystemOKActionPerformed);
        dlgChangeSystem.getContentPane().add(btnDlgChangeSystemOK, "split 2, flowx, tag ok");

        btnDlgChangeSystemCancel.setText(locale.getString("btn.cancel"));
        btnDlgChangeSystemCancel.addActionListener(this::btnDlgChangeSystemCancelActionPerformed);
        dlgChangeSystem.getContentPane().add(btnDlgChangeSystemCancel, "tag cancel");

        dlgEditClubsGroups.getContentPane().setLayout(new MigLayout("flowy, insets dialog", "[sg, fill]unrel[sg, fill]unrel[sg, fill]", "[][grow, fill][][]unrel[]"));

        jLabel25.setText(locale.getString("club_groups.club_groups"));
        dlgEditClubsGroups.getContentPane().add(jLabel25);

        lstClubsGroups.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstClubsGroups.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstClubsGroups.addListSelectionListener(this::lstClubsGroupsValueChanged);
        scpClubsGroups.setViewportView(lstClubsGroups);

        dlgEditClubsGroups.getContentPane().add(scpClubsGroups);

        btnAddGroup.setText(locale.getString("club_groups.btn_new_group"));
        btnAddGroup.addActionListener(this::btnAddGroupActionPerformed);
        dlgEditClubsGroups.getContentPane().add(btnAddGroup);

        btnRemoveGroup.setText(locale.getString("club_groups.btn_remove_group"));
        btnRemoveGroup.addActionListener(this::btnRemoveGroupActionPerformed);
        dlgEditClubsGroups.getContentPane().add(btnRemoveGroup);

        btnDlgEditClubsGroupsClose.setText(locale.getString("btn.close"));
        btnDlgEditClubsGroupsClose.addActionListener(this::btnDlgEditClubsGroupsCloseActionPerformed);
        dlgEditClubsGroups.getContentPane().add(btnDlgEditClubsGroupsClose, "spanx, wrap, tag cancel");

        jLabel42.setText(locale.getString("club_groups.clubs_in_selected_group"));
        dlgEditClubsGroups.getContentPane().add(jLabel42);

        scpClubsInSelectedGroup.setViewportView(lstClubsInSelectedGroup);

        dlgEditClubsGroups.getContentPane().add(scpClubsInSelectedGroup);

        btnAddClub.setText(locale.getString("club_groups.btn_add_club"));
        btnAddClub.addActionListener(this::btnAddClubActionPerformed);
        dlgEditClubsGroups.getContentPane().add(btnAddClub);

        btnRemoveClub.setText(locale.getString("club_groups.btn_remove_club"));
        btnRemoveClub.addActionListener(this::btnRemoveClubActionPerformed);
        dlgEditClubsGroups.getContentPane().add(btnRemoveClub, "wrap");

        jLabel41.setText(locale.getString("club_groups.known_clubs"));
        dlgEditClubsGroups.getContentPane().add(jLabel41);

        lstClubs.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        scpClubs.setViewportView(lstClubs);

        dlgEditClubsGroups.getContentPane().add(scpClubs, "grow, spany 3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Tournament settings");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new MigLayout("flowy"));

        initGeneralControls(smallFont);
        initHandicapControls();
        initPlacementControls();
        initPairingControls(smallFont, smallItalicFont);
        initTeamPlacementControls();

        getContentPane().add(tpnParameters, "push, grow");

        btnClose.setText(locale.getString("btn.close"));
        btnClose.addActionListener(this::btnCloseActionPerformed);
        getContentPane().add(btnClose, "split, flowx, tag cancel");

        btnPrint.setText(locale.getString("btn.print"));
        btnPrint.addActionListener(this::btnPrintActionPerformed);
        getContentPane().add(btnPrint, "tag help2");

        btnHelp.setText(locale.getString("btn.help"));
        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg")));
        btnHelp.addActionListener(this::btnHelpActionPerformed);
        getContentPane().add(btnHelp, "tag help");
    }

    private void initGeneralControls(Font smallFont) {
        pnlGen.setLayout(new MigLayout("flowy"));

        lblSystemName.setFont(scaleFont(lblSystemName, 1.6f));
        lblSystemName.setText(locale.getString("tournament.system"));
        pnlGen.add(lblSystemName, "spanx 2, ax r");

        pnlTournamentDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.details")));
        pnlTournamentDetails.setLayout(new MigLayout("wrap 2"));

        jLabel2.setFont(smallFont);
        jLabel2.setText(locale.getString("tournament.name"));
        pnlTournamentDetails.add(jLabel2);

        txfName.setText("Unnamed Tournament");
        txfName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfNameFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfName, "wmin 120lp, pushx, growx");

        jLabel1.setFont(smallFont);
        jLabel1.setText(locale.getString("tournament.short_name"));
        pnlTournamentDetails.add(jLabel1);

        txfShortName.setToolTipText(locale.getString("tournament.short_name.tooltip"));
        txfShortName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfShortNameFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfShortName, "growx");

        jLabel3.setFont(smallFont);
        jLabel3.setText(locale.getString("tournament.location"));
        pnlTournamentDetails.add(jLabel3);

        txfLocation.setText("Unknown location");
        txfLocation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfLocationFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfLocation, "growx");

        jLabel37.setFont(smallFont);
        jLabel37.setText(locale.getString("tournament.director"));
        pnlTournamentDetails.add(jLabel37, "newline unrel");

        txfDirector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfDirectorFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfDirector, "growx");

        jLabel4.setFont(smallFont);
        jLabel4.setText(locale.getString("tournament.begin_date"));
        pnlTournamentDetails.add(jLabel4, "newline unrel");

        txfBeginDate.setLocale(locale.getLocale());
        txfBeginDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfBeginDateFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfBeginDate, "wmin 120lp, sgx date");

        jLabel8.setFont(smallFont);
        jLabel8.setText(locale.getString("tournament.end_date"));
        pnlTournamentDetails.add(jLabel8);

        txfEndDate.setLocale(locale.getLocale());
        txfEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfEndDateFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfEndDate, "sgx date");

        jLabel5.setFont(smallFont);
        jLabel5.setText(locale.getString("tournament.number_of_rounds"));
        pnlTournamentDetails.add(jLabel5, "newline unrel");

        txfNumberOfRounds.setModel(new SpinnerNumberModel(0, 0, Gotha.MAX_NUMBER_OF_ROUNDS, 1));
        txfNumberOfRounds.addChangeListener(this::txfNumberOfRoundsChanged);
        pnlTournamentDetails.add(txfNumberOfRounds, "wmin 40lp");

        pnlGen.add(pnlTournamentDetails, "growx, pushx");

        pnlSpecialResults.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.options.special_results")));
        pnlSpecialResults.setLayout(new  MigLayout("wrap 4"));

        jLabel15.setFont(smallFont);
        jLabel15.setText(locale.getString("tournament.options.special_results.nbw_absent"));
        pnlSpecialResults.add(jLabel15);

        grpAbsentNBW.add(rdbAbsentNBW0);
        rdbAbsentNBW0.setText("0");
        rdbAbsentNBW0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentNBW0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentNBW0);

        grpAbsentNBW.add(rdbAbsentNBW1);
        rdbAbsentNBW1.setText("½");
        rdbAbsentNBW1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentNBW1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentNBW1);

        grpAbsentNBW.add(rdbAbsentNBW2);
        rdbAbsentNBW2.setText("1");
        rdbAbsentNBW2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentNBW2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentNBW2);

        jLabel16.setFont(smallFont);
        jLabel16.setText(locale.getString("tournament.options.special_results.mms_absent"));
        pnlSpecialResults.add(jLabel16);

        grpAbsentMMS.add(rdbAbsentMMS0);
        rdbAbsentMMS0.setText("0");
        rdbAbsentMMS0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentMMS0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentMMS0);

        grpAbsentMMS.add(rdbAbsentMMS1);
        rdbAbsentMMS1.setText("½");
        rdbAbsentMMS1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentMMS1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentMMS1);

        grpAbsentMMS.add(rdbAbsentMMS2);
        rdbAbsentMMS2.setText("1");
        rdbAbsentMMS2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentMMS2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentMMS2);

        jLabel17.setFont(smallFont);
        jLabel17.setText(locale.getString("tournament.options.special_results.nbw_bye"));
        pnlSpecialResults.add(jLabel17);

        grpByeNBW.add(rdbByeNBW0);
        rdbByeNBW0.setText("0");
        rdbByeNBW0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeNBW0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeNBW0);

        grpByeNBW.add(rdbByeNBW1);
        rdbByeNBW1.setText("½");
        rdbByeNBW1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeNBW1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeNBW1);

        grpByeNBW.add(rdbByeNBW2);
        rdbByeNBW2.setText("1");
        rdbByeNBW2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeNBW2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeNBW2);

        jLabel18.setFont(smallFont);
        jLabel18.setText(locale.getString("tournament.options.special_results.mms_bye"));
        pnlSpecialResults.add(jLabel18);

        grpByeMMS.add(rdbByeMMS0);
        rdbByeMMS0.setText("0");
        rdbByeMMS0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeMMS0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeMMS0);

        grpByeMMS.add(rdbByeMMS1);
        rdbByeMMS1.setText("½");
        rdbByeMMS1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeMMS1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeMMS1);

        grpByeMMS.add(rdbByeMMS2);
        rdbByeMMS2.setText("1");
        rdbByeMMS2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeMMS2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeMMS2);

        ckbRoundDown.setFont(smallFont);
        ckbRoundDown.setSelected(true);
        ckbRoundDown.setText(locale.getString("tournament.options.special_results.round_down_nbw_mms"));
        ckbRoundDown.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbRoundDownFocusLost(evt);
            }
        });
        pnlSpecialResults.add(ckbRoundDown, "newline unrel, spanx 4");

        ckbCountNPG.setFont(smallFont);
        ckbCountNPG.setText(locale.getString("tournament.options.special_results.sos_half_point"));
        ckbCountNPG.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbCountNPGFocusLost(evt);
            }
        });
        pnlSpecialResults.add(ckbCountNPG, "newline unrel, spanx 4");

        pnlGen.add(pnlSpecialResults, "growx, wrap unrel");

        btnChangeSystem.setText(locale.getString("tournament.options.btn_reset_system"));
        btnChangeSystem.addActionListener(this::btnChangeSystemActionPerformed);
        pnlGen.add(btnChangeSystem, "growx, pushx, spany, split");

        pnlMcMahon.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.system.mcmahon")));
        pnlMcMahon.setLayout(new MigLayout("wrap 2"));

        lblMMBar.setFont(smallFont);
        lblMMBar.setText(locale.getString("tournament.system.mcmahon.bar"));
        pnlMcMahon.add(lblMMBar, "wmin 40lp, sg");

        txfMMBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfMMBarFocusLost(evt);
            }
        });
        pnlMcMahon.add(txfMMBar);

        lblMMFloor.setFont(smallFont);
        lblMMFloor.setText(locale.getString("tournament.system.mcmahon.floor"));
        pnlMcMahon.add(lblMMFloor);

        txfMMFloor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfMMFloorFocusLost(evt);
            }
        });
        pnlMcMahon.add(txfMMFloor, "sg");

        lblMMZero.setFont(smallFont);
        lblMMZero.setText(locale.getString("tournament.system.mcmahon.zero"));
        pnlMcMahon.add(lblMMZero);

        txfMMZero.setEnabled(false);
        txfMMZero.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfMMZeroFocusLost(evt);
            }
        });
        pnlMcMahon.add(txfMMZero, "sg");

        pnlGen.add(pnlMcMahon, "growx, gapbottom push, hidemode 3");

        pnlCategories.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), locale.getString("tournament.system.swiss_cat.categories")));
        pnlCategories.setLayout(new MigLayout("wrap 3", "[][40lp::, fill][20lp::, right]", "[][40lp::][]"));

        jLabel9.setText(locale.getString("tournament.system.swiss_cat.categories.number"));
        pnlCategories.add(jLabel9);

        txfNumberOfCategories.setModel(new SpinnerNumberModel(1, 1, Gotha.MAX_NUMBER_OF_CATEGORIES, 1));
        txfNumberOfCategories.addChangeListener(this::txfNumberOfCategoriesChanged);
        pnlCategories.add(txfNumberOfCategories, "wrap");

        btnAdjustCategoryLimits.setText(locale.getString("tournament.system.swiss_cat.categories.btn_adjust"));
        btnAdjustCategoryLimits.addActionListener(this::btnAdjustCategoryLimitsActionPerformed);
        pnlCategories.add(btnAdjustCategoryLimits, "growx, spanx 3");

        jLabel7.setText(locale.getString("tournament.system.swiss_cat.categories.lower_limits"));
        pnlCategories.add(jLabel7, "spanx 3");

        pnlGen.add(pnlCategories, "growx, gapbottom push, hidemode 3");

        tpnParameters.addTab(locale.getString("tournament.options.general"), pnlGen);
    }

    private void initHandicapControls() {
        pnlHan.setLayout(new MigLayout("flowy"));

        lblHandicap.setFont(scaleFont(lblHandicap, 1.2f));
        lblHandicap.setText("No handicap");
        pnlHan.add(lblHandicap);

        pnlHandicap.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.options.handicap")));
        pnlHandicap.setLayout(new MigLayout("wrap 2"));

        jLabel6.setText(locale.getString("tournament.options.handicap.no_handicap_mms_above"));
        pnlHandicap.add(jLabel6);

        txfNoHdRankThreshold.setText("1D");
        txfNoHdRankThreshold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfNoHdRankThresholdFocusLost(evt);
            }
        });
        pnlHandicap.add(txfNoHdRankThreshold, "wmin 40lp");

        jLabel29.setText(locale.getString("tournament.options.handicap.based_on"));
        pnlHandicap.add(jLabel29, "newline unrel, wrap");

        grpHdBase.add(rdbHdBaseMMS);
        rdbHdBaseMMS.setText(locale.getString("tournament.options.handicap.based_on.mms"));
        rdbHdBaseMMS.addActionListener(this::rdbHdBaseMMSActionPerformed);
        pnlHandicap.add(rdbHdBaseMMS, "gapleft indent, wrap");

        grpHdBase.add(rdbHdBaseRank);
        rdbHdBaseRank.setText(locale.getString("tournament.options.handicap.based_on.rank"));
        rdbHdBaseRank.addActionListener(this::rdbHdBaseRankActionPerformed);
        pnlHandicap.add(rdbHdBaseRank, "gapleft indent, wrap unrel");

        jLabel30.setText(locale.getString("tournament.options.handicap.correction"));
        pnlHandicap.add(jLabel30, "wrap");

        grpHdCorrection.add(rdbHdCorrection0);
        rdbHdCorrection0.setText(locale.getString("tournament.options.handicap.correction.0"));
        rdbHdCorrection0.addActionListener(this::rdbHdCorrectionActionPerformed);
        pnlHandicap.add(rdbHdCorrection0, "gapleft indent, wrap");

        grpHdCorrection.add(rdbHdCorrection1);
        rdbHdCorrection1.setText(locale.getString("tournament.options.handicap.correction.-1"));
        rdbHdCorrection1.addActionListener(this::rdbHdCorrectionActionPerformed);
        pnlHandicap.add(rdbHdCorrection1, "gapleft indent, wrap");

        grpHdCorrection.add(rdbHdCorrection2);
        rdbHdCorrection2.setText(locale.getString("tournament.options.handicap.correction.-2"));
        rdbHdCorrection2.addActionListener(this::rdbHdCorrectionActionPerformed);
        pnlHandicap.add(rdbHdCorrection2, "gapleft indent, wrap");

        grpHdCorrection.add(rdbHdCorrection3);
        rdbHdCorrection3.setText(locale.getString("tournament.options.handicap.correction.-3"));
        rdbHdCorrection3.addActionListener(this::rdbHdCorrectionActionPerformed);
        pnlHandicap.add(rdbHdCorrection3, "gapleft indent, wrap unrel");

        grpHdCorrection.add(rdbHdCorrectionPlus1);
        rdbHdCorrectionPlus1.setText(locale.getString("tournament.options.handicap.correction.+1"));
        rdbHdCorrectionPlus1.addActionListener(this::rdbHdCorrectionActionPerformed);
        pnlHandicap.add(rdbHdCorrectionPlus1, "gapleft indent, wrap unrel");

        jLabel10.setText(locale.getString("tournament.options.handicap.ceiling"));
        pnlHandicap.add(jLabel10);

        txfHdCeiling.setText("9");
        txfHdCeiling.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfHdCeilingFocusLost(evt);
            }
        });
        pnlHandicap.add(txfHdCeiling, "wmin 40lp");

        pnlHan.add(pnlHandicap);

        tpnParameters.addTab(locale.getString("tournament.options.handicap"), pnlHan);
    }

    private void initPlacementControls() {
        String[] strCritLN = PlacementParameterSet.criteriaLongNames();

        pnlPla.setLayout(new MigLayout("wrap 5, fill", "[15%:15%:15%, sgx][sgx][sgx][sgx][32%:32%:32%]"));

        pnlPla.add(new JLabel(locale.getString("tournament.options.placement.criterion1")));
        pnlPla.add(new JLabel(locale.getString("tournament.options.placement.criterion2")));
        pnlPla.add(new JLabel(locale.getString("tournament.options.placement.criterion3")));
        pnlPla.add(new JLabel(locale.getString("tournament.options.placement.criterion4")), "wrap");

        cbxCrit1.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxCrit1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCritFocusLost(evt);
            }
        });
        pnlPla.add(cbxCrit1);

        cbxCrit2.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxCrit2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCritFocusLost(evt);
            }
        });
        pnlPla.add(cbxCrit2);

        cbxCrit3.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxCrit3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCritFocusLost(evt);
            }
        });
        pnlPla.add(cbxCrit3);

        cbxCrit4.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxCrit4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCritFocusLost(evt);
            }
        });
        pnlPla.add(cbxCrit4, "wrap unrel");

        pnlGlossary.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.options.placement.criteria_glossary")));
        pnlGlossary.setLayout(new MigLayout("fill"));

        tblGlossary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Short name", "Description"
            }
        ));
        tblGlossary.setEnabled(false);
        scpGlossary.setViewportView(tblGlossary);

        pnlGlossary.add(scpGlossary);

        pnlPla.add(pnlGlossary, "growx, spanx 4");

        txaWarning.setForeground(new java.awt.Color(255, 0, 51));
        txaWarning.setLineWrap(true);
        txaWarning.setOpaque(false);
        txaWarning.setEditable(false);

        pnlPla.add(txaWarning);

        tpnParameters.addTab(locale.getString("tournament.options.placement"), pnlPla);
    }

    private void initPairingControls(Font smallFont, Font smallItalicFont)  {
        pnlPai.setLayout(new MigLayout("flowy", "[grow]unrel[grow]"));

        pnlMain.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.options.pairing.main_criteria")));
        pnlMain.setLayout(new MigLayout("flowy"));

        ckbAvoidMixingCategories.setFont(smallFont);
        ckbAvoidMixingCategories.setSelected(true);
        ckbAvoidMixingCategories.setText(locale.getString("tournament.options.pairing.avoid_mix_cat"));
        ckbAvoidMixingCategories.setEnabled(false);
        ckbAvoidMixingCategories.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pnlMain.add(ckbAvoidMixingCategories);

        ckbMinimizeScoreDifference.setFont(smallFont);
        ckbMinimizeScoreDifference.setSelected(true);
        ckbMinimizeScoreDifference.setText(locale.getString("tournament.options.pairing.minimize_score_difference"));
        ckbMinimizeScoreDifference.setEnabled(false);
        ckbMinimizeScoreDifference.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pnlMain.add(ckbMinimizeScoreDifference);

        pnlSeeding.setBorder(javax.swing.BorderFactory.createTitledBorder(null, locale.getString("tournament.options.pairing.inside_group"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, smallFont));
        pnlSeeding.setLayout(new MigLayout());

        jLabel20.setFont(smallFont);
        jLabel20.setText(locale.getString("tournament.options.pairing.former_rounds_up_to"));
        pnlSeeding.add(jLabel20, "spanx 2, split 2");

        txfLastRoundForSeedSystem1.setText("2");
        txfLastRoundForSeedSystem1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfLastRoundForSeedSystem1FocusLost(evt);
            }
        });
        pnlSeeding.add(txfLastRoundForSeedSystem1, "wrap");

        pnlFormer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, locale.getString("tournament.options.pairing.former_rounds"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, smallFont));
        pnlFormer.setLayout(new MigLayout("flowy"));

        ckbAddSortOnRating.setFont(smallFont);
        ckbAddSortOnRating.setSelected(true);
        ckbAddSortOnRating.setText(locale.getString("tournament.options.pairing.add_sorting_on_rating"));
        ckbAddSortOnRating.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ckbAddSortOnRating.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbAddSortOnRatingFocusLost(evt);
            }
        });
        pnlFormer.add(ckbAddSortOnRating);

        grpSeedingFormer.add(rdbFormerSplitAndRandom);
        rdbFormerSplitAndRandom.setFont(smallFont);
        rdbFormerSplitAndRandom.setSelected(true);
        rdbFormerSplitAndRandom.setText(locale.getString("tournament.options.pairing.split_random"));
        rdbFormerSplitAndRandom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbFormerSplitAndRandom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlFormer.add(rdbFormerSplitAndRandom);

        grpSeedingFormer.add(rdbFormerSplitAndFold);
        rdbFormerSplitAndFold.setFont(smallFont);
        rdbFormerSplitAndFold.setText(locale.getString("tournament.options.pairing.split_fold"));
        rdbFormerSplitAndFold.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbFormerSplitAndFold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlFormer.add(rdbFormerSplitAndFold);

        grpSeedingFormer.add(rdbFormerSplitAndSlip);
        rdbFormerSplitAndSlip.setFont(smallFont);
        rdbFormerSplitAndSlip.setText(locale.getString("tournament.options.pairing.split_slip"));
        rdbFormerSplitAndSlip.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbFormerSplitAndSlip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlFormer.add(rdbFormerSplitAndSlip);

        pnlSeeding.add(pnlFormer, "pushx, growx, sg");

        pnlLatter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, locale.getString("tournament.options.pairing.latter_rounds"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, smallFont));
        pnlLatter.setLayout(new MigLayout("ay b, flowy"));

        grpSeedingLatter.add(rdbLatterSplitAndRandom);
        rdbLatterSplitAndRandom.setFont(smallFont);
        rdbLatterSplitAndRandom.setText(locale.getString("tournament.options.pairing.split_random"));
        rdbLatterSplitAndRandom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbLatterSplitAndRandom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlLatter.add(rdbLatterSplitAndRandom);

        grpSeedingLatter.add(rdbLatterSplitAndFold);
        rdbLatterSplitAndFold.setFont(smallFont);
        rdbLatterSplitAndFold.setSelected(true);
        rdbLatterSplitAndFold.setText(locale.getString("tournament.options.pairing.split_fold"));
        rdbLatterSplitAndFold.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbLatterSplitAndFold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlLatter.add(rdbLatterSplitAndFold);

        grpSeedingLatter.add(rdbLatterSplitAndSlip);
        rdbLatterSplitAndSlip.setFont(smallFont);
        rdbLatterSplitAndSlip.setText(locale.getString("tournament.options.pairing.split_slip"));
        rdbLatterSplitAndSlip.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbLatterSplitAndSlip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlLatter.add(rdbLatterSplitAndSlip);

        pnlSeeding.add(pnlLatter, "pushx, growx, sg");

        pnlMain.add(pnlSeeding, "pushx, growx");

        pnlDUDD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, locale.getString("tournament.options.pairing.different_groups"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, smallFont));
        pnlDUDD.setLayout(new MigLayout("flowy"));

        ckbAvoid2DUDD.setFont(smallFont);
        ckbAvoid2DUDD.setSelected(true);
        ckbAvoid2DUDD.setText(locale.getString("tournament.options.pairing.different_groups.draw_twice"));
        ckbAvoid2DUDD.setEnabled(false);
        pnlDUDD.add(ckbAvoid2DUDD, "spanx 2");

        ckbCompensate.setFont(smallFont);
        ckbCompensate.setSelected(true);
        ckbCompensate.setText(locale.getString("tournament.options.pairing.different_groups.compensate_draw"));
        ckbCompensate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbCompensateFocusLost(evt);
            }
        });
        pnlDUDD.add(ckbCompensate, "spanx 2");

        jLabel40.setFont(smallFont);
        jLabel40.setText(locale.getString("tournament.options.pairing.different_groups.choose"));
        pnlDUDD.add(jLabel40, "spanx 2");

        pnlDUDDUG.setBorder(javax.swing.BorderFactory.createTitledBorder(null, locale.getString("tournament.options.pairing.different_groups.player_upper"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, smallFont));
        pnlDUDDUG.setLayout(new MigLayout("flowy"));

        grpDUDDUG.add(rdbDUDDUGTop);
        rdbDUDDUGTop.setFont(smallFont);
        rdbDUDDUGTop.setText(locale.getString("tournament.options.pairing.different_groups.player_in_top"));
        rdbDUDDUGTop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDUGTop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDUG.add(rdbDUDDUGTop);

        grpDUDDUG.add(rdbDUDDUGMid);
        rdbDUDDUGMid.setFont(smallFont);
        rdbDUDDUGMid.setSelected(true);
        rdbDUDDUGMid.setText(locale.getString("tournament.options.pairing.different_groups.player_in_middle"));
        rdbDUDDUGMid.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDUGMid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDUG.add(rdbDUDDUGMid);

        grpDUDDUG.add(rdbDUDDUGBot);
        rdbDUDDUGBot.setFont(smallFont);
        rdbDUDDUGBot.setText(locale.getString("tournament.options.pairing.different_groups.player_in_bottom"));
        rdbDUDDUGBot.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDUGBot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDUG.add(rdbDUDDUGBot);

        pnlDUDD.add(pnlDUDDUG, "pushx, growx, wrap, sgx");

        pnlDUDDLG.setBorder(javax.swing.BorderFactory.createTitledBorder(null, locale.getString("tournament.options.pairing.different_groups.player_lower"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, smallFont));
        pnlDUDDLG.setLayout(new MigLayout("flowy"));

        grpDUDDLG.add(rdbDUDDLGTop);
        rdbDUDDLGTop.setFont(smallFont);
        rdbDUDDLGTop.setText(locale.getString("tournament.options.pairing.different_groups.player_in_top"));
        rdbDUDDLGTop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDLGTop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDLG.add(rdbDUDDLGTop);

        grpDUDDLG.add(rdbDUDDLGMid);
        rdbDUDDLGMid.setFont(smallFont);
        rdbDUDDLGMid.setSelected(true);
        rdbDUDDLGMid.setText(locale.getString("tournament.options.pairing.different_groups.player_in_middle"));
        rdbDUDDLGMid.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDLGMid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDLG.add(rdbDUDDLGMid);

        grpDUDDLG.add(rdbDUDDLGBot);
        rdbDUDDLGBot.setFont(smallFont);
        rdbDUDDLGBot.setText(locale.getString("tournament.options.pairing.different_groups.player_in_bottom"));
        rdbDUDDLGBot.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDLGBot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDLG.add(rdbDUDDLGBot);

        pnlDUDD.add(pnlDUDDLG, "pushx, growx, sgx");

        pnlMain.add(pnlDUDD, "pushx, growx");

        pnlPai.add(pnlMain, "spany, wrap");

        pnlBase.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.options.pairing.base_criteria")));
        pnlBase.setLayout(new MigLayout());

        ckbAvoidPairingSamePair.setFont(smallFont);
        ckbAvoidPairingSamePair.setSelected(true);
        ckbAvoidPairingSamePair.setText(locale.getString("tournament.options.pairing.base_criteria.avoid_pairing_twice"));
        ckbAvoidPairingSamePair.setEnabled(false);
        ckbAvoidPairingSamePair.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pnlBase.add(ckbAvoidPairingSamePair, "spanx 2, wrap unrel");

        grpRandom.add(rdbNoRandom);
        rdbNoRandom.setFont(smallFont);
        rdbNoRandom.setSelected(true);
        rdbNoRandom.setText(locale.getString("tournament.options.pairing.base_criteria.no_random"));
        rdbNoRandom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbNoRandom.addActionListener(this::rdbNoRandomActionPerformed);
        rdbNoRandom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbRandomFocusLost(evt);
            }
        });
        pnlBase.add(rdbNoRandom, "spanx 2, wrap");

        grpRandom.add(rdbAcceptRandom);
        rdbAcceptRandom.setFont(smallFont);
        rdbAcceptRandom.setText(locale.getString("tournament.options.pairing.base_criteria.accept_random"));
        rdbAcceptRandom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAcceptRandom.addActionListener(this::rdbAcceptRandomActionPerformed);
        rdbAcceptRandom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbRandomFocusLost(evt);
            }
        });
        pnlBase.add(rdbAcceptRandom);

        ckbDeterministic.setFont(smallFont);
        ckbDeterministic.setText(locale.getString("tournament.options.pairing.base_criteria.deterministic_random"));
        ckbDeterministic.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ckbDeterministic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbDeterministicFocusLost(evt);
            }
        });
        pnlBase.add(ckbDeterministic, "wrap unrel");

        ckbBalanceWB.setFont(smallFont);
        ckbBalanceWB.setSelected(true);
        ckbBalanceWB.setText(locale.getString("tournament.options.pairing.base_criteria.balance_white_black"));
        ckbBalanceWB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ckbBalanceWB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbBalanceWBFocusLost(evt);
            }
        });
        pnlBase.add(ckbBalanceWB);

        pnlPai.add(pnlBase, "growx");

        pnlSecondary.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.options.pairing.secondary_criteria")));
        pnlSecondary.setLayout(new MigLayout());

        jLabel21.setFont(smallItalicFont);
        jLabel21.setText(locale.getString("tournament.options.pairing.secondary_criteria.dont_apply"));
        pnlSecondary.add(jLabel21, "spanx, wrap");

        jLabel22.setFont(smallItalicFont);
        jLabel22.setText(locale.getString("tournament.options.pairing.secondary_criteria.dont_apply.mms_ge"));
        pnlSecondary.add(jLabel22, "gapleft indent");

        txfSeRankThreshold.setText("3D");
        txfSeRankThreshold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(txfSeRankThreshold, "wrap");

        ckbSeNbWinsThresholdActive.setFont(smallItalicFont);
        ckbSeNbWinsThresholdActive.setText(locale.getString("tournament.options.pairing.secondary_criteria.dont_apply.half_wins"));
        ckbSeNbWinsThresholdActive.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(ckbSeNbWinsThresholdActive, "gapleft indent, spanx, wrap");

        ckbSeBarThresholdActive.setFont(smallItalicFont);
        ckbSeBarThresholdActive.setSelected(true);
        ckbSeBarThresholdActive.setText(locale.getString("tournament.options.pairing.secondary_criteria.dont_apply.mcmahon_bar"));
        ckbSeBarThresholdActive.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbSeBarThresholdActiveFocusLost(evt);
            }
        });
        pnlSecondary.add(ckbSeBarThresholdActive, "gapleft indent, spanx, wrap");

        jLabel28.setFont(smallFont);
        jLabel28.setText(locale.getString("tournament.options.pairing.secondary_criteria.avoid_intra_country"));
        pnlSecondary.add(jLabel28, "wrap 0");

        jLabel38.setFont(smallFont);
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel38.setText(locale.getString("tournament.options.pairing.secondary_criteria.prefer_group_gap"));
        pnlSecondary.add(jLabel38, "pushx, growx, ay r");

        txfSeCountry.setText("1");
        txfSeCountry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(txfSeCountry, "wrap");

        jLabel23.setFont(smallFont);
        jLabel23.setText(locale.getString("tournament.options.pairing.secondary_criteria.avoid_intra_club_group"));
        pnlSecondary.add(jLabel23, "split 2, flowy");

        btnEditClubsGroups.setFont(smallFont);
        btnEditClubsGroups.setText(locale.getString("tournament.options.pairing.secondary_criteria.btn_edit_club_groups"));
        btnEditClubsGroups.addActionListener(this::btnEditClubsGroupsActionPerformed);
        pnlSecondary.add(btnEditClubsGroups, "hmax 16lp, wrap 0");

        jLabel39.setFont(smallFont);
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel39.setText(locale.getString("tournament.options.pairing.secondary_criteria.prefer_group_gap"));
        pnlSecondary.add(jLabel39, "pushx, growx, ay r");

        txfSeClubsGroup.setText("2");
        txfSeClubsGroup.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(txfSeClubsGroup, "wrap");

        jLabel24.setFont(smallFont);
        jLabel24.setText(locale.getString("tournament.options.pairing.secondary_criteria.avoid_intra_club"));
        pnlSecondary.add(jLabel24, "wrap 0");

        jLabel26.setFont(smallFont);
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel26.setText(locale.getString("tournament.options.pairing.secondary_criteria.prefer_group_gap"));
        pnlSecondary.add(jLabel26, "pushx, growx, ay r");

        txfSeClub.setText("3");
        txfSeClub.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(txfSeClub, "wrap unrel");

        ckbSeMinimizeHandicap.setFont(smallFont);
        ckbSeMinimizeHandicap.setText(locale.getString("tournament.options.pairing.secondary_criteria.minimize_handicap"));
        ckbSeMinimizeHandicap.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ckbSeMinimizeHandicap.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(ckbSeMinimizeHandicap, "spanx");

        pnlPai.add(pnlSecondary, "growx");

        tpnParameters.addTab(locale.getString("tournament.options.pairing"), pnlPai);
    }

    private void initTeamPlacementControls() {
        String[] strCritLN = TeamPlacementParameterSet.criteriaLongNames();

        pnlTPL.setLayout(new MigLayout("wrap 6", "[grow, sg]"));

        pnlTPL.add(new JLabel(locale.getString("tournament.options.placement.criterion1")));
        pnlTPL.add(new JLabel(locale.getString("tournament.options.placement.criterion2")));
        pnlTPL.add(new JLabel(locale.getString("tournament.options.placement.criterion3")));
        pnlTPL.add(new JLabel(locale.getString("tournament.options.placement.criterion4")));
        pnlTPL.add(new JLabel(locale.getString("tournament.options.placement.criterion5")));
        pnlTPL.add(new JLabel(locale.getString("tournament.options.placement.criterion6")));

        cbxTeamCrit1.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxTeamCrit1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit1);

        cbxTeamCrit2.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxTeamCrit2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit2);

        cbxTeamCrit3.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxTeamCrit3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit3);

        cbxTeamCrit4.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxTeamCrit4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit4);

        cbxTeamCrit5.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxTeamCrit5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit5);

        cbxTeamCrit6.setModel(new DefaultComboBoxModel<>(strCritLN));
        cbxTeamCrit6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit6, "wrap unrel");

        pnlTeamGlossary.setBorder(javax.swing.BorderFactory.createTitledBorder(locale.getString("tournament.options.placement.criteria_glossary")));
        pnlTeamGlossary.setLayout(new MigLayout());

        tblTeamGlossary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Short name", "Description"
            }
        ));
        tblTeamGlossary.setEnabled(false);
        scpTeamGlossary.setViewportView(tblTeamGlossary);

        pnlTeamGlossary.add(scpTeamGlossary, "grow");

        pnlTPL.add(pnlTeamGlossary, "growx, spanx 4");

        txaTeamWarning.setForeground(new java.awt.Color(255, 0, 51));
        txaTeamWarning.setLineWrap(true);
        txaTeamWarning.setOpaque(false);
        txaTeamWarning.setEditable(false);

        pnlTPL.add(txaTeamWarning, "spanx 2");

        tpnParameters.addTab(locale.getString("tournament.options.team_placement"), pnlTPL);
    }

    private void btnDlgChangeSystemCancelActionPerformed(java.awt.event.ActionEvent evt) {
        dlgChangeSystem.dispose();
    }

    private void btnDlgChangeSystemOKActionPerformed(java.awt.event.ActionEvent evt) {
        int system = TournamentParameterSet.TYPE_MCMAHON;
        if (this.rdbMcMahon.isSelected()) system = TournamentParameterSet.TYPE_MCMAHON;
        if (this.rdbSwiss.isSelected()) system = TournamentParameterSet.TYPE_SWISS;
        if (this.rdbSwissCat.isSelected()) system = TournamentParameterSet.TYPE_SWISSCAT;

        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        PlacementParameterSet pps = tps.getPlacementParameterSet();
        PairingParameterSet paiPS = tps.getPairingParameterSet();
        DPParameterSet dpps = tps.getDPParameterSet();
        switch (system){
            case TournamentParameterSet.TYPE_MCMAHON :
                gps.initForMM();
                hps.initForMM();
                pps.initForMM();
                paiPS.initForMM();
                dpps.initForMM();
                break;
            case TournamentParameterSet.TYPE_SWISS:
                gps.initForSwiss();
                hps.initForSwiss();
                pps.initForSwiss();
                paiPS.initForSwiss();
                dpps.initForSwiss();
                break;
            case TournamentParameterSet.TYPE_SWISSCAT :
                gps.initForSwissCat();
                hps.initForSwissCat();
                pps.initForSwissCat();
                paiPS.initForSwissCat();
                dpps.initForSwissCat();
                break;
            default :
                gps.initForMM();
                hps.initForMM();
                pps.initForMM();
                paiPS.initForMM();
        }

        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        dlgChangeSystem.dispose();
    }

    private void btnChangeSystemActionPerformed(java.awt.event.ActionEvent evt) {
        this.ckbResetParameters.setSelected(false);
        this.lblNewSystem.setEnabled(true);
        this.rdbMcMahon.setEnabled(true);
        this.rdbSwiss.setEnabled(true);
        this.rdbSwissCat.setEnabled(true);
        this.lblRecommended.setEnabled(true);

        int tournamentType = TournamentParameterSet.TYPE_UNDEFINED;
        try {
            tournamentType = tournament.tournamentType();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (tournamentType == TournamentParameterSet.TYPE_MCMAHON) rdbMcMahon.setSelected(true);
        if (tournamentType == TournamentParameterSet.TYPE_SWISS) rdbSwiss.setSelected(true);
        if (tournamentType == TournamentParameterSet.TYPE_SWISSCAT) rdbSwissCat.setSelected(true);

        dlgChangeSystem.setVisible(true);
        dlgChangeSystem.setTitle(locale.getString("tournament.reset"));
        dlgChangeSystem.pack();

    }

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {
        TournamentPrinting.printTournamentParameters(tournament);
    }

    private void rdbAcceptRandomActionPerformed(java.awt.event.ActionEvent evt) {
        this.randomControlsChange();
    }

    private void rdbNoRandomActionPerformed(java.awt.event.ActionEvent evt) {
        this.randomControlsChange();
    }

    private void ckbSecCritFocusLost(java.awt.event.FocusEvent evt) {
        secCritControlsFocusLost();
    }

    private void txfSecCritFocusLost(java.awt.event.FocusEvent evt) {
        secCritControlsFocusLost();
    }

    private void secCritControlsFocusLost(){
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;


        int oldRankThreshold = paiPS.getPaiSeRankThreshold();
        int newRankThreshold = Player.convertKDPToInt(this.txfSeRankThreshold.getText());
        if (newRankThreshold != oldRankThreshold){
            paiPS.setPaiSeRankThreshold(newRankThreshold);
            bSomethingHasChanged = true;
        }

        boolean oldBarThresholdActive = paiPS.isPaiSeBarThresholdActive();
        boolean newBarThresholdActive = this.ckbSeBarThresholdActive.isSelected();
        if (newBarThresholdActive != oldBarThresholdActive){
            paiPS.setPaiSeBarThresholdActive(newBarThresholdActive);
            bSomethingHasChanged = true;
        }
        boolean oldNbWinsThresholdActive = paiPS.isPaiSeNbWinsThresholdActive();
        boolean newNbWinsThresholdActive = this.ckbSeNbWinsThresholdActive.isSelected();
         if (newNbWinsThresholdActive != oldNbWinsThresholdActive){
            paiPS.setPaiSeNbWinsThresholdActive(newNbWinsThresholdActive);
            bSomethingHasChanged = true;
        }

        int oldPreferMMSDiffRatherThanSameCountry = paiPS.getPaiSePreferMMSDiffRatherThanSameCountry();
        int newPreferMMSDiffRatherThanSameCountry;
        try {
            newPreferMMSDiffRatherThanSameCountry = Integer.parseInt(this.txfSeCountry.getText());
        }
        catch(NumberFormatException e){
            newPreferMMSDiffRatherThanSameCountry = oldPreferMMSDiffRatherThanSameCountry;
            this.txfSeCountry.setText("" + oldPreferMMSDiffRatherThanSameCountry);
        }
        if (newPreferMMSDiffRatherThanSameCountry != oldPreferMMSDiffRatherThanSameCountry){
            paiPS.setPaiSePreferMMSDiffRatherThanSameCountry(newPreferMMSDiffRatherThanSameCountry);
            bSomethingHasChanged = true;
        }

        int oldPreferMMSDiffRatherThanSameClubsGroup = paiPS.getPaiSePreferMMSDiffRatherThanSameClubsGroup();
        int newPreferMMSDiffRatherThanSameClubsGroup;
        try{
            newPreferMMSDiffRatherThanSameClubsGroup = Integer.parseInt(this.txfSeClubsGroup.getText());
        }
        catch(NumberFormatException e){
            newPreferMMSDiffRatherThanSameClubsGroup = oldPreferMMSDiffRatherThanSameClubsGroup;
            this.txfSeClubsGroup.setText("" + oldPreferMMSDiffRatherThanSameClubsGroup);
        }
        if (newPreferMMSDiffRatherThanSameClubsGroup != oldPreferMMSDiffRatherThanSameClubsGroup){
            paiPS.setPaiSePreferMMSDiffRatherThanSameClubsGroup(newPreferMMSDiffRatherThanSameClubsGroup);
            bSomethingHasChanged = true;
        }

        int oldPreferMMSDiffRatherThanSameClub = paiPS.getPaiSePreferMMSDiffRatherThanSameClub();
        int newPreferMMSDiffRatherThanSameClub;
        // newPreferMMSDiffRatherThanSameClub = Integer.parseInt(this.txfSeClub.getText());
        try{
            newPreferMMSDiffRatherThanSameClub = Integer.parseInt(this.txfSeClub.getText());
        }
        catch(NumberFormatException e){
            newPreferMMSDiffRatherThanSameClub = oldPreferMMSDiffRatherThanSameClub;
            this.txfSeClub.setText("" + oldPreferMMSDiffRatherThanSameClub);
        }

        if (newPreferMMSDiffRatherThanSameClub != oldPreferMMSDiffRatherThanSameClub){
            paiPS.setPaiSePreferMMSDiffRatherThanSameClub(newPreferMMSDiffRatherThanSameClub);
            bSomethingHasChanged = true;
        }
        long oldMinimizeHandicap = paiPS.getPaiSeMinimizeHandicap();
        long newMinimizeHandicap = this.ckbSeMinimizeHandicap.isSelected() ? paiPS.getPaiSeDefSecCrit() : 0;
        if (newMinimizeHandicap != oldMinimizeHandicap){
            paiPS.setPaiSeMinimizeHandicap(newMinimizeHandicap);
            bSomethingHasChanged = true;
        }

        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void ckbBalanceWBFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;
        long oldBalanceWB = paiPS.getPaiBaBalanceWB();
        long newBalanceWB = this.ckbBalanceWB.isSelected() ? PairingParameterSet.PAIBA_MAX_BALANCEWB : 0;
        if (newBalanceWB != oldBalanceWB){
            paiPS.setPaiBaBalanceWB(newBalanceWB);
            bSomethingHasChanged = true;
        }
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void ckbDeterministicFocusLost(java.awt.event.FocusEvent evt) {
        randomControlsChange();
    }

    private void rdbRandomFocusLost(java.awt.event.FocusEvent evt) {
        randomControlsChange();
    }



    private void randomControlsChange(){
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;
        long oldRandom = paiPS.getPaiBaRandom();
        long newRandom = this.rdbAcceptRandom.isSelected() ? PairingParameterSet.PAIBA_MAX_RANDOM : 0;
        if (newRandom != oldRandom){
            paiPS.setPaiBaRandom(newRandom);
            bSomethingHasChanged = true;
        }
        boolean oldDeterminitic = paiPS.isPaiBaDeterministic();
        boolean newDeterminitic = this.ckbDeterministic.isSelected();
        if (newDeterminitic != oldDeterminitic){
            paiPS.setPaiBaDeterministic(newDeterminitic);
            bSomethingHasChanged = true;
        }
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
             } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void rdbDUDDFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;
        int oldDUDDUpperMode = paiPS.getPaiMaDUDDUpperMode();
        int newDUDDUpperMode = PairingParameterSet.PAIMA_DUDD_TOP;
        if (this.rdbDUDDUGMid.isSelected()) newDUDDUpperMode = PairingParameterSet.PAIMA_DUDD_MID;
        if (this.rdbDUDDUGBot.isSelected()) newDUDDUpperMode = PairingParameterSet.PAIMA_DUDD_BOT;
        if (newDUDDUpperMode != oldDUDDUpperMode){
            paiPS.setPaiMaDUDDUpperMode(newDUDDUpperMode);
            bSomethingHasChanged = true;
        }
        int oldDUDDLowerMode = paiPS.getPaiMaDUDDLowerMode();
        int newDUDDLowerMode = PairingParameterSet.PAIMA_DUDD_TOP;
        if (this.rdbDUDDLGMid.isSelected()) newDUDDLowerMode = PairingParameterSet.PAIMA_DUDD_MID;
        if (this.rdbDUDDLGBot.isSelected()) newDUDDLowerMode = PairingParameterSet.PAIMA_DUDD_BOT;
        if (newDUDDLowerMode != oldDUDDLowerMode){
            paiPS.setPaiMaDUDDLowerMode(newDUDDLowerMode);
            bSomethingHasChanged = true;
        }

        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void rdbSeedSystemFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;
        int oldSeedSystem1 = paiPS.getPaiMaSeedSystem1();
        int newSeedSystem1 = PairingParameterSet.PAIMA_SEED_SPLITANDRANDOM;
        if (this.rdbFormerSplitAndFold.isSelected()) newSeedSystem1 = PairingParameterSet.PAIMA_SEED_SPLITANDFOLD;
        if (this.rdbFormerSplitAndSlip.isSelected()) newSeedSystem1 = PairingParameterSet.PAIMA_SEED_SPLITANDSLIP;
        if (newSeedSystem1 != oldSeedSystem1){
            paiPS.setPaiMaSeedSystem1(newSeedSystem1);
            bSomethingHasChanged = true;
        }

        int oldSeedSystem2 = paiPS.getPaiMaSeedSystem2();
        int newSeedSystem2 = PairingParameterSet.PAIMA_SEED_SPLITANDRANDOM;
        if (this.rdbLatterSplitAndFold.isSelected()) newSeedSystem2 = PairingParameterSet.PAIMA_SEED_SPLITANDFOLD;
        if (this.rdbLatterSplitAndSlip.isSelected()) newSeedSystem2 = PairingParameterSet.PAIMA_SEED_SPLITANDSLIP;
        if (newSeedSystem2 != oldSeedSystem2){
            paiPS.setPaiMaSeedSystem2(newSeedSystem2);
            bSomethingHasChanged = true;
        }

        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void ckbAddSortOnRatingFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        GeneralParameterSet gps = null;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        PlacementCriterion oldPaiMaAdditionalPlacementCritSystem1 = paiPS.getPaiMaAdditionalPlacementCritSystem1();
        PlacementCriterion newPaiMaAdditionalPlacementCritSystem1 = this.ckbAddSortOnRating.isSelected() ?
            PlacementCriterion.RATING : null;

        if (newPaiMaAdditionalPlacementCritSystem1 != oldPaiMaAdditionalPlacementCritSystem1){
            paiPS.setPaiMaAdditionalPlacementCritSystem1(newPaiMaAdditionalPlacementCritSystem1);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void txfLastRoundForSeedSystem1FocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int oldLastRoundForSeedSystem1 = paiPS.getPaiMaLastRoundForSeedSystem1();
        int newLastRoundForSeedSystem1 = new Integer(txfLastRoundForSeedSystem1.getText()).intValue() - 1;
        if (newLastRoundForSeedSystem1 < 1 || newLastRoundForSeedSystem1 >= gps.getNumberOfRounds()){
            this.txfLastRoundForSeedSystem1.setText("" + (oldLastRoundForSeedSystem1 + 1));
            return;
        }
        if (newLastRoundForSeedSystem1 != oldLastRoundForSeedSystem1){
            paiPS.setPaiMaLastRoundForSeedSystem1(newLastRoundForSeedSystem1);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void txfMMFloorFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int oldGenMMFloor = gps.getGenMMFloor();
        int newGenMMFloor = Player.convertKDPToInt(this.txfMMFloor.getText());
        txfMMFloor.setText("" + Player.convertIntToKD(newGenMMFloor));
        if (newGenMMFloor > GeneralParameterSet.GEN_MM_FLOOR_MAX
                || newGenMMFloor < GeneralParameterSet.GEN_MM_FLOOR_MIN
                || newGenMMFloor > gps.getGenMMBar()){
            // Error. Keep old value
            txfMMFloor.setText("" + Player.convertIntToKD(oldGenMMFloor));
            return;
        }
        if (newGenMMFloor != oldGenMMFloor){
            gps.setGenMMFloor(newGenMMFloor);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void txfMMBarFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int oldGenMMBar = gps.getGenMMBar();
        int newGenMMBar = Player.convertKDPToInt(this.txfMMBar.getText());
        txfMMBar.setText("" + Player.convertIntToKD(newGenMMBar));
        if ((newGenMMBar > GeneralParameterSet.GEN_MM_BAR_MAX)
            || (newGenMMBar < GeneralParameterSet.GEN_MM_BAR_MIN)
            || (newGenMMBar < gps.getGenMMFloor())){
            // Error. Keep old value
            txfMMBar.setText("" + Player.convertIntToKD(oldGenMMBar));
            return;
        }
        if (newGenMMBar != oldGenMMBar){
            gps.setGenMMBar(newGenMMBar);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void rdbAbsentOrByeFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;
        int newGenMMS2ValueAbsent = 0;
        if (this.rdbAbsentMMS1.isSelected()) newGenMMS2ValueAbsent = 1;
        if (this.rdbAbsentMMS2.isSelected()) newGenMMS2ValueAbsent = 2;
        if (newGenMMS2ValueAbsent != gps.getGenMMS2ValueAbsent()){
            gps.setGenMMS2ValueAbsent(newGenMMS2ValueAbsent);
            bSomethingHasChanged = true;
        }
        int newGenNBW2ValueAbsent = 0;
        if (this.rdbAbsentNBW1.isSelected()) newGenNBW2ValueAbsent = 1;
        if (this.rdbAbsentNBW2.isSelected()) newGenNBW2ValueAbsent = 2;
        if (newGenNBW2ValueAbsent != gps.getGenNBW2ValueAbsent()){
            gps.setGenNBW2ValueAbsent(newGenNBW2ValueAbsent);
            bSomethingHasChanged = true;
        }
        int newGenMMS2ValueBye = 0;
        if (this.rdbByeMMS1.isSelected()) newGenMMS2ValueBye = 1;
        if (this.rdbByeMMS2.isSelected()) newGenMMS2ValueBye = 2;
        if (newGenMMS2ValueBye != gps.getGenMMS2ValueBye()){
            gps.setGenMMS2ValueBye(newGenMMS2ValueBye);
            bSomethingHasChanged = true;
        }
        int newGenNBW2ValueBye = 0;
        if (this.rdbByeNBW1.isSelected()) newGenNBW2ValueBye = 1;
        if (this.rdbByeNBW2.isSelected()) newGenNBW2ValueBye = 2;
        if (newGenNBW2ValueBye != gps.getGenNBW2ValueBye()){
            gps.setGenNBW2ValueBye(newGenNBW2ValueBye);
            bSomethingHasChanged = true;
        }

        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void txfHdCeilingFocusLost(java.awt.event.FocusEvent evt) {
       TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        int oldHdCeiling = hps.getHdCeiling();
        int newHdCeiling;
        try{
            newHdCeiling = (new Integer(txfHdCeiling.getText())).intValue();
        }
        catch(NumberFormatException e){
            try {
                this.updatePnlHan();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
            return;
        }
        if (newHdCeiling < 0 || newHdCeiling > 9) {
            try {
                this.updatePnlHan();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
            return;
        }
        if (newHdCeiling == oldHdCeiling) return;
        hps.setHdCeiling(newHdCeiling);
        tps.setHandicapParameterSet(hps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updHdCorrection(){
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        int oldHdCorrection = hps.getHdCorrection();
        int newHdCorrection = 0;
        if (rdbHdCorrection0.isSelected()) newHdCorrection = 0;
        if (rdbHdCorrection1.isSelected()) newHdCorrection = 1;
        if (rdbHdCorrection2.isSelected()) newHdCorrection = 2;
        if (rdbHdCorrection3.isSelected()) newHdCorrection = 3;
        if (rdbHdCorrectionPlus1.isSelected()) newHdCorrection = -1;
        if (newHdCorrection == oldHdCorrection) return;
        hps.setHdCorrection(newHdCorrection);
        tps.setHandicapParameterSet(hps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void txfNoHdRankThresholdFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        int oldNoHdRankThreshold = hps.getHdNoHdRankThreshold();
        int newNoHdRankThreshold = Player.convertKDPToInt(txfNoHdRankThreshold.getText());
        if (newNoHdRankThreshold < Gotha.MIN_RANK) {
            try {
                this.updatePnlHan();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
            return;
        }
        if (newNoHdRankThreshold == oldNoHdRankThreshold) return;
        hps.setHdNoHdRankThreshold(newNoHdRankThreshold);
        tps.setHandicapParameterSet(hps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnAdjustCategoryLimitsActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            tournament.adjustCategoryLimits();
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void txfNumberOfRoundsChanged(ChangeEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        int oldNbRounds = gps.getNumberOfRounds();
        int newNbRounds = oldNbRounds;
        try {
            newNbRounds = ((Integer) this.txfNumberOfRounds.getValue());
        } catch (NumberFormatException ex) {
        }
        if (newNbRounds <= 0) newNbRounds = oldNbRounds;
        if (newNbRounds > Gotha.MAX_NUMBER_OF_ROUNDS) newNbRounds = Gotha.MAX_NUMBER_OF_ROUNDS;

        // Refuse to decrease number of rounds if round not empty
        for (int r = oldNbRounds - 1; r >= newNbRounds; r-- ){
            try {
                if ((tournament.gamesList(r).size() > 0) || (tournament.getByePlayer(r) != null)) {
                    newNbRounds = r + 1;
                    break;
                }
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (newNbRounds == oldNbRounds){
            this.txfNumberOfRounds.setValue(oldNbRounds);
            return;
        }

        gps.setNumberOfRounds(newNbRounds);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void txfBeginDateFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        Date oldBeginDate = gps.getBeginDate();
        Date newBeginDate = txfBeginDate.getDate();
        if (newBeginDate.equals(oldBeginDate)) return;
        gps.setBeginDate(newBeginDate);

        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void txfLocationFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        String oldLocation = gps.getLocation();
        String newLocation = txfLocation.getText();
        if (newLocation.compareTo(oldLocation) == 0) return;
        gps.setLocation(newLocation);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void txfNameFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        String oldName = gps.getName();
        String newName = txfName.getText();
        if (newName.compareTo(oldName) == 0) return;
        gps.setName(newName);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void txfNumberOfCategoriesChanged(ChangeEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        int oldNbCategories = gps.getNumberOfCategories();
        int newNbCategories = -1;
        try {
            newNbCategories = (Integer) this.txfNumberOfCategories.getValue();
        } catch (NumberFormatException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (newNbCategories <= 0 || newNbCategories > Gotha.MAX_NUMBER_OF_CATEGORIES){
            this.txfNumberOfCategories.setValue(oldNbCategories);
        }
        else{
            if (newNbCategories == oldNbCategories) return;
            int[] oldLowerCategoryLimits = gps.getLowerCategoryLimits();
            int[] newLowerCategoryLimits = new int[newNbCategories - 1];
            for (int c = 0; c < newLowerCategoryLimits.length; c++ ){
                if (c < oldLowerCategoryLimits.length) newLowerCategoryLimits[c] = oldLowerCategoryLimits[c];
                else newLowerCategoryLimits[c] = -30;
            }
            gps.setNumberOfCategories(newNbCategories);
            gps.setLowerCategoryLimits(newLowerCategoryLimits);
            tps.setGeneralParameterSet(gps);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void tabTxfLowerLimitOfCatFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();

        for (int c = 0; c < this.tabTxfLowerLimitOfCat.length; c++){
            if (evt.getSource() == tabTxfLowerLimitOfCat[c]){
                int newLowerLimit = Player.convertKDPToInt(tabTxfLowerLimitOfCat[c].getText());
                int oldLowerLimit = gps.getLowerCategoryLimits()[c];
                if (newLowerLimit < -30) {
                    try {
                        this.updatePnlGen();
                    } catch (RemoteException ex) {
                        Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return;
                }
                if (newLowerLimit == oldLowerLimit) return;
                int[] newTabTxfLowerLimitOfCat = gps.getLowerCategoryLimits();
                newTabTxfLowerLimitOfCat[c] = newLowerLimit;
                for (int cc = 0; cc < c; cc++)
                    if (newTabTxfLowerLimitOfCat[cc] < newLowerLimit) newTabTxfLowerLimitOfCat[cc] = newLowerLimit;
                for (int cc = c; cc < newTabTxfLowerLimitOfCat.length; cc++)
                    if (newTabTxfLowerLimitOfCat[cc] > newLowerLimit) newTabTxfLowerLimitOfCat[cc] = newLowerLimit;
                gps.setLowerCategoryLimits(newTabTxfLowerLimitOfCat);
                tps.setGeneralParameterSet(gps);
                try {
                    tournament.setTournamentParameterSet(tps);
                    this.tournamentChanged();
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void updateCriteriaFromComboBoxes(){
        TournamentParameterSet tps;
        PlacementParameterSet pps;
        try {
            tps = tournament.getTournamentParameterSet();
            pps = tps.getPlacementParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        PlacementCriterion[] plaCrit = pps.getPlaCriteria();
        plaCrit[0] = PlacementCriterion.fromLongName((String)cbxCrit1.getModel().getSelectedItem());
        plaCrit[1] = PlacementCriterion.fromLongName((String)cbxCrit2.getModel().getSelectedItem());
        plaCrit[2] = PlacementCriterion.fromLongName((String)cbxCrit3.getModel().getSelectedItem());
        plaCrit[3] = PlacementCriterion.fromLongName((String)cbxCrit4.getModel().getSelectedItem());

        // Immediately filter double DC/SDC criteria, which is stritly forbidden
        int nbDirCrit = 0;
        for (int c = 0; c < plaCrit.length; c++){
            if (plaCrit[c] != PlacementCriterion.DC && plaCrit[c] != PlacementCriterion.SDC) continue;
            nbDirCrit ++;
            if (nbDirCrit > 1) plaCrit[c] = PlacementCriterion.NUL;
        }

        pps.setPlaCriteria(plaCrit);
        tps.setPlacementParameterSet(pps);

        String strCriteria = pps.checkCriteriaCoherence(this);
        this.txaWarning.setText(strCriteria);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void updateTeamCriteriaFromComboBoxes(){
        TeamTournamentParameterSet ttps;
        TeamPlacementParameterSet tpps;
        try {
            ttps = tournament.getTeamTournamentParameterSet();
            tpps = ttps.getTeamPlacementParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        TeamPlacementCriterion[] plaCrit = tpps.getPlaCriteria();
        plaCrit[0] = TeamPlacementCriterion.fromLongName((String)cbxTeamCrit1.getModel().getSelectedItem());
        plaCrit[1] = TeamPlacementCriterion.fromLongName((String)cbxTeamCrit2.getModel().getSelectedItem());
        plaCrit[2] = TeamPlacementCriterion.fromLongName((String)cbxTeamCrit3.getModel().getSelectedItem());
        plaCrit[3] = TeamPlacementCriterion.fromLongName((String)cbxTeamCrit4.getModel().getSelectedItem());
        plaCrit[4] = TeamPlacementCriterion.fromLongName((String)cbxTeamCrit5.getModel().getSelectedItem());
        plaCrit[5] = TeamPlacementCriterion.fromLongName((String)cbxTeamCrit6.getModel().getSelectedItem());

        tpps.setPlaCriteria(plaCrit);
        ttps.setTeamPlacementParameterSet(tpps);



        try {
            tournament.setTeamTournamentParameterSet(ttps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {
        cleanClose();
    }

    private void cleanClose(){
        running = false;
        dispose();
    }

    private void txfShortNameFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        String oldShortName = gps.getShortName();
        String newShortName = txfShortName.getText();
        newShortName = Gotha.eliminateForbiddenCharacters(newShortName);
        txfShortName.setText(newShortName);
        if (newShortName.compareTo(oldShortName) == 0) return;
        gps.setShortName(newShortName);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            tournament.setHasBeenSavedOnce(false);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void rdbHdBaseMMSActionPerformed(java.awt.event.ActionEvent evt) {
        this.updHdBase();
    }

    private void rdbHdBaseRankActionPerformed(java.awt.event.ActionEvent evt) {
        this.updHdBase();
    }

    private void btnHelpActionPerformed(ActionEvent evt) {
        Component selected = tpnParameters.getSelectedComponent();
        if (selected == pnlGen)
            Gotha.displayGothaHelp("General settings");
        else if (selected == pnlHan)
            Gotha.displayGothaHelp("Handicap settings");
        else if (selected == pnlPla)
            Gotha.displayGothaHelp("Placement settings");
        else if (selected == pnlPai)
            Gotha.displayGothaHelp("Pairing settings");
        else if (selected == pnlTPL)
            Gotha.displayGothaHelp("Team Placement settings");
    }

    private void ckbResetParametersActionPerformed(java.awt.event.ActionEvent evt) {
        boolean bResetSelected = this.ckbResetParameters.isSelected();

        this.lblNewSystem.setEnabled(!bResetSelected);
        this.rdbMcMahon.setEnabled(!bResetSelected);
        this.rdbSwiss.setEnabled(!bResetSelected);
        this.rdbSwissCat.setEnabled(!bResetSelected);
        this.lblRecommended.setEnabled(!bResetSelected);

        if (bResetSelected){
            int tournamentType = TournamentParameterSet.TYPE_UNDEFINED;
            try {
                tournamentType = tournament.tournamentType();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (tournamentType == TournamentParameterSet.TYPE_MCMAHON) rdbMcMahon.setSelected(true);
            if (tournamentType == TournamentParameterSet.TYPE_SWISS) rdbSwiss.setSelected(true);
            if (tournamentType == TournamentParameterSet.TYPE_SWISSCAT) rdbSwissCat.setSelected(true);
        }

    }

    private void btnHelpTeamPlacementActionPerformed(java.awt.event.ActionEvent evt) {
        Gotha.displayGothaHelp("Team Placement settings");
    }

    private void cbxCritFocusLost(java.awt.event.FocusEvent evt) {
        updateCriteriaFromComboBoxes();
    }

    private void cbxTeamCritFocusLost(java.awt.event.FocusEvent evt) {
        updateTeamCriteriaFromComboBoxes();
    }

    private void txfEndDateFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        Date oldEndDate = gps.getEndDate();
        Date newEndDate = txfEndDate.getDate();
        if (newEndDate.equals(oldEndDate)) return;
        gps.setEndDate(newEndDate);

        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void txfDirectorFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        String oldDirector = gps.getDirector();
        String newDirector = txfDirector.getText();
        if (newDirector.compareTo(oldDirector) == 0) return;
        gps.setDirector(newDirector);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void rdbHdCorrectionActionPerformed(java.awt.event.ActionEvent evt) {
        updHdCorrection();
    }

    private void ckbRoundDownFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;
        boolean newRoundDown = this.ckbRoundDown.isSelected();
        if (newRoundDown != gps.isGenRoundDownNBWMMS()){
            gps.setGenRoundDownNBWMMS(newRoundDown);
            bSomethingHasChanged = true;
        }

        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void ckbSeBarThresholdActiveFocusLost(java.awt.event.FocusEvent evt) {
        secCritControlsFocusLost();
    }

    private void ckbCompensateFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;
        boolean oldCompensateDUDD = paiPS.isPaiMaCompensateDUDD();
        boolean newCompensateDUDD = this.ckbCompensate.isSelected();
        if (newCompensateDUDD != oldCompensateDUDD){
            paiPS.setPaiMaCompensateDUDD(newCompensateDUDD);
            bSomethingHasChanged = true;
        }
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void txfMMZeroFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int oldGenMMZero = gps.getGenMMZero();
        int newGenMMZero = Player.convertKDPToInt(this.txfMMZero.getText());
        txfMMZero.setText("" + Player.convertIntToKD(newGenMMZero));
        if (newGenMMZero > GeneralParameterSet.GEN_MM_ZERO_MAX
                || newGenMMZero < GeneralParameterSet.GEN_MM_ZERO_MIN){
            // Error. Keep old value
            txfMMZero.setText("" + Player.convertIntToKD(oldGenMMZero));
            return;
        }
        if (newGenMMZero != oldGenMMZero){
            gps.setGenMMZero(newGenMMZero);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void btnDlgEditClubsGroupsCloseActionPerformed(java.awt.event.ActionEvent evt) {
        this.dlgEditClubsGroups.dispose();
    }

    private void btnEditClubsGroupsActionPerformed(java.awt.event.ActionEvent evt) {
        int w = JFrGotha.MEDIUM_FRAME_WIDTH;
        int h = JFrGotha.MEDIUM_FRAME_HEIGHT;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        dlgEditClubsGroups.setBounds((dim.width - w) / 2, (dim.height - h) / 2, w, h);
        dlgEditClubsGroups.setTitle(locale.getString("club_groups.window_title"));
        dlgEditClubsGroups.setIconImage(Gotha.getIconImage());
        dlgEditClubsGroups.setVisible(true);

    }

    private void lstClubsGroupsValueChanged(javax.swing.event.ListSelectionEvent evt) {
        this.lstClubsInSelectedGroup.removeAll();
        try {
            updateClubsInSelectedGroup();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnAddGroupActionPerformed(java.awt.event.ActionEvent evt) {
        String strResponse = JOptionPane.showInputDialog(locale.getString("club_groups.enter_new_group_name"), locale.getString("club_groups.group_name"));
        if (strResponse == null) {
            return;
        }
        if (strResponse.length() < 1) return;
        String groupName = strResponse;
        try {
            ClubsGroup clubsGroup = tournament.getClubsGroupByName(groupName);
            if (clubsGroup != null){
                JOptionPane.showMessageDialog(this, locale.format("club_groups.group_exists", groupName), locale.getString("alert.error"), JOptionPane.ERROR_MESSAGE);
                return;
            }
            tournament.addClubsGroup(new ClubsGroup(groupName));
            this.tournamentChanged();

        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnRemoveGroupActionPerformed(java.awt.event.ActionEvent evt) {
        Object sel = lstClubsGroups.getSelectedValue();
        if (sel == null) return;
        String strGroup = (String)sel;
        try {
            tournament.removeClubsGroup(new ClubsGroup(strGroup));
            lstClubsGroups.clearSelection();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.tournamentChanged();

    }

    private void btnAddClubActionPerformed(java.awt.event.ActionEvent evt) {
        String groupName = "";
        String clubName = "";
        Object sel = lstClubsGroups.getSelectedValue();
        if (sel == null){
            JOptionPane.showMessageDialog(this, locale.getString("club_groups.select_club_group"), locale.getString("alert.error"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        groupName = (String)sel;

        String strResponse = JOptionPane.showInputDialog(locale.getString("club_groups.enter_club_name"), locale.getString("club_groups.club_name"));
        if (strResponse == null) {
            return;
        }
        if (strResponse.length() < 1){
            return;
        }
        clubName = strResponse;
        try {
            tournament.addClubToClubsGroup(groupName, clubName);
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.tournamentChanged();
    }

    private void btnRemoveClubActionPerformed(java.awt.event.ActionEvent evt) {
        Object selGroup = this.lstClubsGroups.getSelectedValue();
        if (selGroup == null) return;
        String groupName = (String)selGroup;
        Object selClub = this.lstClubsInSelectedGroup.getSelectedValue();
        if (selClub == null) return;
        String clubName = (String)selClub;
        try {
            ClubsGroup cg = tournament.getClubsGroupByName(groupName);
            tournament.removeClubFromClubsGroup(groupName, clubName);
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.tournamentChanged();
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        cleanClose();
    }

    private void ckbCountNPGFocusLost(java.awt.event.FocusEvent evt) {
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean bSomethingHasChanged = false;
        boolean newCountNPG = this.ckbCountNPG.isSelected();
        if (newCountNPG != gps.isGenCountNotPlayedGamesAsHalfPoint()){
            gps.setGenCountNotPlayedGamesAsHalfPoint(newCountNPG);
            bSomethingHasChanged = true;
        }

        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void updHdBase(){
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        boolean oldHdBase = hps.isHdBasedOnMMS();
        boolean newHdBase = true;
        if (rdbHdBaseRank.isSelected()) newHdBase = false;
        if (newHdBase == oldHdBase) return;
        hps.setHdBasedOnMMS(newHdBase);
        tps.setHandicapParameterSet(hps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void customInitComponents()throws RemoteException{
        int w = JFrGotha.BIG_FRAME_WIDTH;
        int h = JFrGotha.BIG_FRAME_HEIGHT;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((dim.width - w)/2, (dim.height -h)/2, w, h);
        setIconImage(Gotha.getIconImage());

        initPnlGen();
        initPnlHan();
        initPnlPla();
        initPnlPai();
        initPnlTPl();
        this.updateAllViews();
    }

    private void initPnlGen()throws RemoteException{
        if (Gotha.runningMode == Gotha.RUNNING_MODE_CLI) this.txfShortName.setEditable(false);
        updatePnlGen();
    }
    private void initPnlHan()throws RemoteException{
        updatePnlHan();
    }
    private void initPnlPla()throws RemoteException{
        // For any type of tournament crit 1 should not be modified
        cbxCrit1.setEnabled(false);
        // And for SwissCat Tournaments, crit 2 should not be modified
        if (tournament.tournamentType() == TournamentParameterSet.TYPE_SWISSCAT)
            cbxCrit2.setEnabled(false);

        // Fill Criterion Glossary JTable

        JFrGotha.formatColumn(tblGlossary, CRITERION_NAME, locale.getString("tournament.options.placement.criterion_name"), 60, SwingConstants.LEFT, SwingConstants.LEFT);
        JFrGotha.formatColumn(tblGlossary, CRITERION_SHORT_NAME, locale.getString("tournament.options.placement.criterion_short_name"), 50, SwingConstants.LEFT, SwingConstants.LEFT);
        JFrGotha.formatColumn(tblGlossary, CRITERION_DESCRIPTION, locale.getString("tournament.options.placement.criterion_description"), 270, SwingConstants.LEFT, SwingConstants.LEFT);

        DefaultTableModel model = (DefaultTableModel)tblGlossary.getModel();
        while (model.getRowCount() > 0) model.removeRow(0);

        for (int iPCrit = 0; iPCrit < PlacementCriterion.values().length; iPCrit++){
            PlacementCriterion pCrit = PlacementCriterion.values()[iPCrit];
            Vector<String> row = new Vector<String>();
            row.add(pCrit.getLongName());
            row.add(pCrit.getShortName());
            row.add(pCrit.getDescription(locale));

            model.addRow(row);
        }

        updatePnlPla();
    }

    private void initPnlTPl()throws RemoteException{
        // For any type of tournament crit 1 should not be modified
        cbxTeamCrit1.setEnabled(false);

        // Fill Criterion Glossary JTable

        JFrGotha.formatColumn(tblTeamGlossary, CRITERION_NAME, locale.getString("tournament.options.placement.criterion_name"), 60, SwingConstants.LEFT, SwingConstants.LEFT);
        JFrGotha.formatColumn(tblTeamGlossary, CRITERION_SHORT_NAME, locale.getString("tournament.options.placement.criterion_short_name"), 50, SwingConstants.LEFT, SwingConstants.LEFT);
        JFrGotha.formatColumn(tblTeamGlossary, CRITERION_DESCRIPTION, locale.getString("tournament.options.placement.criterion_description"), 270, SwingConstants.LEFT, SwingConstants.LEFT);

        DefaultTableModel model = (DefaultTableModel)tblTeamGlossary.getModel();
        while (model.getRowCount() > 0) model.removeRow(0);

        for (int iPCrit = 0; iPCrit < TeamPlacementCriterion.values().length; iPCrit++){
            TeamPlacementCriterion pCrit = TeamPlacementCriterion.values()[iPCrit];
            Vector<String> row = new Vector<String>();
            row.add(pCrit.getLongName());
            row.add(pCrit.getShortName());
            row.add(pCrit.getDescription(locale));


            model.addRow(row);
        }

        updatePnlTPl();
    }

    private void initPnlPai()throws RemoteException{
        updatePnlPai();
    }

    private void updatePnlGen()throws RemoteException{
        GeneralParameterSet gps = tournament.getTournamentParameterSet().getGeneralParameterSet();
        int tournamentType = tournament.tournamentType();
        if (tournamentType == TournamentParameterSet.TYPE_UNDEFINED){
            this.pnlTournamentDetails.setVisible(true);
            this.lblSystemName.setVisible(false);
            this.pnlCategories.setVisible(false);
            this.pnlMcMahon.setVisible(false);
        }
        if (tournamentType == TournamentParameterSet.TYPE_MCMAHON){
            this.pnlTournamentDetails.setVisible(true);
            this.lblSystemName.setVisible(true);
            this.lblSystemName.setText(locale.getString("tournament.system.mcmahon_system"));
            this.pnlCategories.setVisible(false);
            this.pnlMcMahon.setVisible(true);
        }
        if (tournamentType == TournamentParameterSet.TYPE_SWISS){
            this.pnlTournamentDetails.setVisible(true);
            this.lblSystemName.setVisible(true);
            this.lblSystemName.setText(locale.getString("tournament.system.swiss_system"));
            this.pnlCategories.setVisible(false);
            this.pnlMcMahon.setVisible(false);
        }
        if (tournamentType == TournamentParameterSet.TYPE_SWISSCAT){
            this.pnlTournamentDetails.setVisible(true);
            this.lblSystemName.setVisible(true);
            this.lblSystemName.setText(locale.getString("tournament.system.swiss_cat_system"));
            this.pnlCategories.setVisible(true);
            this.pnlMcMahon.setVisible(false);
        }

        // Identification Panel
        this.txfShortName.setText(gps.getShortName());
        this.txfName.setText(gps.getName());
        this.txfLocation.setText(gps.getLocation());
        this.txfDirector.setText(gps.getDirector());
        this.txfBeginDate.setDate(gps.getBeginDate());
        this.txfEndDate.setDate(gps.getEndDate());
        this.txfNumberOfRounds.setValue(gps.getNumberOfRounds());

        // Categories Panel
        if (this.pnlCategories.isVisible()){
            int nbCat = gps.getNumberOfCategories();
            this.txfNumberOfCategories.setValue(nbCat);
            if (tabLblCat != null){
                for (int c = 0; c < tabLblCat.length; c++){
                    pnlCategories.remove(tabLblCat[c]);
                }
            }
            if (tabTxfLowerLimitOfCat != null){
                for (int c = 0; c < tabTxfLowerLimitOfCat.length; c++){
                    pnlCategories.remove(tabTxfLowerLimitOfCat[c]);
                }
            }
            if (tabLblNbPlayersOfCat != null){
                for (int c = 0; c < tabLblNbPlayersOfCat.length; c++){
                    pnlCategories.remove(tabLblNbPlayersOfCat[c]);
                }
            }

            // Dimensions for pnlCategories and its components
            int tpgcPnlWidth = 220;
            int tpgcPnlHeadHeight = 120;
            int tpgcPnlBottomHeight = 30;

            int tpgcLblLeft = 30;
            int tpgcLblTop = tpgcPnlHeadHeight;
            int tpgcLblHeight = 20;
            int tpgcLblWidth = 80;

            int tpgcTxfLeft = tpgcLblLeft + tpgcLblWidth + 10;
            int tpgcTxfWidth = 30;

            int tpgcNbPLeft = tpgcTxfLeft + tpgcTxfWidth + 10;
            int tpgcNbPWidth = 30;

            tabLblCat = new JLabel[nbCat];
            tabTxfLowerLimitOfCat = new JTextField[nbCat];
            tabLblNbPlayersOfCat = new JLabel[nbCat];
            for (int c = 0; c < nbCat; c++){
                // Category c Labels
                tabLblCat[c] = new JLabel(locale.format("tournament.system.swiss_cat.category", c+1));
                pnlCategories.add(tabLblCat[c]);
                tabLblCat[c].updateUI();
                // Lower limits Text fields
                int niv = (c < nbCat -1) ? gps.getLowerCategoryLimits()[c] : -30;
                String strNiv = Player.convertIntToKD(niv);
                tabTxfLowerLimitOfCat[c] = new JTextField(strNiv);
                pnlCategories.add(tabTxfLowerLimitOfCat[c]);
                tabTxfLowerLimitOfCat[c].updateUI();
                if (c < nbCat -1){
                    tabTxfLowerLimitOfCat[c].setEditable(true);
                    tabTxfLowerLimitOfCat[c].addFocusListener(new java.awt.event.FocusAdapter() {
                        @Override
                        public void focusLost(java.awt.event.FocusEvent evt) {
                            tabTxfLowerLimitOfCatFocusLost(evt);
                        }
                    });
                }
                else tabTxfLowerLimitOfCat[c].setEditable(false);
                // number of players in the category Text Field
                int nbPl = tournament.numberOfPlayersStrongerOrEqualTo(niv);
                if (c > 0) nbPl -= tournament.numberOfPlayersStrongerOrEqualTo(gps.getLowerCategoryLimits()[c-1]);
                tabLblNbPlayersOfCat[c] = new JLabel("" + nbPl);
                pnlCategories.add(tabLblNbPlayersOfCat[c]);
                tabLblNbPlayersOfCat[c].updateUI();
            }
        }
        // McMahon Panel
        if (this.pnlMcMahon.isVisible()){
            this.txfMMBar.setText(Player.convertIntToKD(gps.getGenMMBar()));
            this.txfMMFloor.setText(Player.convertIntToKD(gps.getGenMMFloor()));
            this.txfMMZero.setText(Player.convertIntToKD(gps.getGenMMZero()));
        }

        // Special results panel
        switch(gps.getGenMMS2ValueAbsent()){
            case 0 : this.rdbAbsentMMS0.setSelected(true); break;
            case 1 : this.rdbAbsentMMS1.setSelected(true); break;
            case 2 : this.rdbAbsentMMS2.setSelected(true); break;
        }
        switch(gps.getGenNBW2ValueAbsent()){
            case 0 : this.rdbAbsentNBW0.setSelected(true); break;
            case 1 : this.rdbAbsentNBW1.setSelected(true); break;
            case 2 : this.rdbAbsentNBW2.setSelected(true); break;
        }
        switch(gps.getGenMMS2ValueBye()){
            case 0 : this.rdbByeMMS0.setSelected(true); break;
            case 1 : this.rdbByeMMS1.setSelected(true); break;
            case 2 : this.rdbByeMMS2.setSelected(true); break;
        }
        switch(gps.getGenNBW2ValueBye()){
            case 0 : this.rdbByeNBW0.setSelected(true); break;
            case 1 : this.rdbByeNBW1.setSelected(true); break;
            case 2 : this.rdbByeNBW2.setSelected(true); break;
        }

        this.ckbRoundDown.setSelected(gps.isGenRoundDownNBWMMS());
        this.ckbCountNPG.setSelected(gps.isGenCountNotPlayedGamesAsHalfPoint());
    }

    private void updatePnlHan()throws RemoteException{
        int tournamentType = tournament.tournamentType();
        if (tournamentType == TournamentParameterSet.TYPE_UNDEFINED){
            this.lblHandicap.setText(locale.getString("tournament.options.handicap.no_handicap"));
            this.pnlHandicap.setVisible(true);
        }
        if (tournamentType == TournamentParameterSet.TYPE_MCMAHON){
            this.lblHandicap.setText("");
            this.pnlHandicap.setVisible(true);
        }
        if (tournamentType == TournamentParameterSet.TYPE_SWISS){
            this.lblHandicap.setText(locale.getString("tournament.options.handicap.no_handicap"));
            this.pnlHandicap.setVisible(false);
       }
        if (tournamentType == TournamentParameterSet.TYPE_SWISSCAT){
            this.lblHandicap.setText("");
            this.pnlHandicap.setVisible(true);
        }
        if (pnlHandicap.isVisible()){
            HandicapParameterSet hps = tournament.getTournamentParameterSet().getHandicapParameterSet();
            this.txfNoHdRankThreshold.setText(Player.convertIntToKD(hps.getHdNoHdRankThreshold()));
            if(hps.isHdBasedOnMMS()) this.rdbHdBaseMMS.setSelected(true);
            else this.rdbHdBaseRank.setSelected(true);
            switch(hps.getHdCorrection()){
                case 0 : this.rdbHdCorrection0.setSelected(true); break;
                case 1 : this.rdbHdCorrection1.setSelected(true); break;
                case 2 : this.rdbHdCorrection2.setSelected(true); break;
                case 3 : this.rdbHdCorrection3.setSelected(true); break;
                case -1: this.rdbHdCorrectionPlus1.setSelected(true); break;
            }
            this.txfHdCeiling.setText("" + hps.getHdCeiling());
        }
    }

    private void updatePnlPla()throws RemoteException{
        PlacementParameterSet pps = tournament.getTournamentParameterSet().getPlacementParameterSet();
        GeneralParameterSet gps = tournament.getTournamentParameterSet().getGeneralParameterSet();
        // update contents of combo boxes
        PlacementCriterion[] displayedCriteria = pps.getPlaCriteria();
            this.cbxCrit1.getModel().setSelectedItem(displayedCriteria[0].getLongName());
            this.cbxCrit2.getModel().setSelectedItem(displayedCriteria[1].getLongName());
            this.cbxCrit3.getModel().setSelectedItem(displayedCriteria[2].getLongName());
            this.cbxCrit4.getModel().setSelectedItem(displayedCriteria[3].getLongName());

        // update of McMahon bar and floor JTextField
        int bar = gps.getGenMMBar();
        int floor = gps.getGenMMFloor();
        int zero = gps.getGenMMZero();
        this.txfMMBar.setText("" + Player.convertIntToKD(bar));
        this.txfMMFloor.setText("" + Player.convertIntToKD(floor));
        this.txfMMZero.setText("" + Player.convertIntToKD(zero));
    }

    private void updatePnlTPl()throws RemoteException{
        TeamPlacementParameterSet tpps = tournament.getTeamTournamentParameterSet().getTeamPlacementParameterSet();
        // update contents of combo boxes
        TeamPlacementCriterion[] displayedCriteria = tpps.getPlaCriteria();
        this.cbxTeamCrit1.getModel().setSelectedItem(displayedCriteria[0].getLongName());
        this.cbxTeamCrit2.getModel().setSelectedItem(displayedCriteria[1].getLongName());
        this.cbxTeamCrit3.getModel().setSelectedItem(displayedCriteria[2].getLongName());
        this.cbxTeamCrit4.getModel().setSelectedItem(displayedCriteria[3].getLongName());
        this.cbxTeamCrit5.getModel().setSelectedItem(displayedCriteria[4].getLongName());
        this.cbxTeamCrit6.getModel().setSelectedItem(displayedCriteria[5].getLongName());
    }

    private void updatePnlPai()throws RemoteException{
        if (tournament.tournamentType() == TournamentParameterSet.TYPE_SWISSCAT)
            this.ckbSeMinimizeHandicap.setVisible(true);
        else
            this.ckbSeMinimizeHandicap.setVisible(false);

        if (tournament.tournamentType() == TournamentParameterSet.TYPE_MCMAHON)
            this.ckbSeBarThresholdActive.setVisible(true);
        else
            this.ckbSeBarThresholdActive.setVisible(false);

        PairingParameterSet paiPS = tournament.getTournamentParameterSet().getPairingParameterSet();

        this.ckbAvoidMixingCategories.setSelected(paiPS.getPaiMaAvoidMixingCategories() != 0);
        this.ckbMinimizeScoreDifference.setSelected(paiPS.getPaiMaMinimizeScoreDifference() != 0);
        this.txfLastRoundForSeedSystem1.setText("" + (paiPS.getPaiMaLastRoundForSeedSystem1() + 1));
        this.ckbAddSortOnRating.setSelected(
                paiPS.getPaiMaAdditionalPlacementCritSystem1() == PlacementCriterion.RATING);

        if (paiPS.getPaiMaSeedSystem1() == PairingParameterSet.PAIMA_SEED_SPLITANDRANDOM)
            this.rdbFormerSplitAndRandom.setSelected(true);
        if (paiPS.getPaiMaSeedSystem1() == PairingParameterSet.PAIMA_SEED_SPLITANDFOLD)
            this.rdbFormerSplitAndFold.setSelected(true);
        if (paiPS.getPaiMaSeedSystem1() == PairingParameterSet.PAIMA_SEED_SPLITANDSLIP)
            this.rdbFormerSplitAndSlip.setSelected(true);
        if (paiPS.getPaiMaSeedSystem2() == PairingParameterSet.PAIMA_SEED_SPLITANDRANDOM)
            this.rdbLatterSplitAndRandom.setSelected(true);
        if (paiPS.getPaiMaSeedSystem2() == PairingParameterSet.PAIMA_SEED_SPLITANDFOLD)
            this.rdbLatterSplitAndFold.setSelected(true);
        if (paiPS.getPaiMaSeedSystem2() == PairingParameterSet.PAIMA_SEED_SPLITANDSLIP)
            this.rdbLatterSplitAndSlip.setSelected(true);

        this.ckbCompensate.setSelected(paiPS.isPaiMaCompensateDUDD());
        if (paiPS.getPaiMaDUDDUpperMode() == PairingParameterSet.PAIMA_DUDD_TOP)
            this.rdbDUDDUGTop.setSelected(true);
        if (paiPS.getPaiMaDUDDUpperMode() == PairingParameterSet.PAIMA_DUDD_MID)
            this.rdbDUDDUGMid.setSelected(true);
        if (paiPS.getPaiMaDUDDUpperMode() == PairingParameterSet.PAIMA_DUDD_BOT)
            this.rdbDUDDUGBot.setSelected(true);
        if (paiPS.getPaiMaDUDDLowerMode() == PairingParameterSet.PAIMA_DUDD_TOP)
            this.rdbDUDDLGTop.setSelected(true);
        if (paiPS.getPaiMaDUDDLowerMode() == PairingParameterSet.PAIMA_DUDD_MID)
            this.rdbDUDDLGMid.setSelected(true);
        if (paiPS.getPaiMaDUDDLowerMode() == PairingParameterSet.PAIMA_DUDD_BOT)
            this.rdbDUDDLGBot.setSelected(true);

        this.ckbAvoidPairingSamePair.setSelected(paiPS.getPaiBaAvoidDuplGame() != 0);

        if (paiPS.getPaiBaRandom() == 0){
            this.rdbNoRandom.setSelected(true);
            this.ckbDeterministic.setSelected(false);
            this.ckbDeterministic.setEnabled(false);
        }
        else{
            this.rdbAcceptRandom.setSelected(true);
            this.ckbDeterministic.setSelected(paiPS.isPaiBaDeterministic());
            this.ckbDeterministic.setEnabled(true);
        }

        this.ckbBalanceWB.setSelected(paiPS.getPaiBaBalanceWB() != 0);

        this.txfSeRankThreshold.setText(Player.convertIntToKD(paiPS.getPaiSeRankThreshold()));
        this.ckbSeBarThresholdActive.setSelected(paiPS.isPaiSeBarThresholdActive());
        this.ckbSeNbWinsThresholdActive.setSelected(paiPS.isPaiSeNbWinsThresholdActive());
        this.txfSeCountry.setText("" + paiPS.getPaiSePreferMMSDiffRatherThanSameCountry());
        this.txfSeClubsGroup.setText("" + paiPS.getPaiSePreferMMSDiffRatherThanSameClubsGroup());
        this.txfSeClub.setText("" + paiPS.getPaiSePreferMMSDiffRatherThanSameClub());
        this.ckbSeMinimizeHandicap.setSelected(paiPS.getPaiSeMinimizeHandicap() != 0);

        updateDlgClubsGroups();
    }

    private void updateDlgClubsGroups() throws RemoteException {
        // Clubs groups
        // If a group is selected, keep the selection
        String strSelGroup = "";
        Object sel = lstClubsGroups.getSelectedValue();
        if (sel != null)  strSelGroup = (String)sel;

        ArrayList<ClubsGroup> alClubsGroups = tournament.clubsGroupsList();
        if (alClubsGroups == null) return;
        ArrayList<String> alStrCG = new ArrayList<String>();
        for(int i = 0; i < alClubsGroups.size(); i++){
            alStrCG.add(alClubsGroups.get(i).getName());
        }
        Collections.sort(alStrCG);
        String[] strCG = new String[alStrCG.size()];

        for(int i = 0; i < strCG.length; i++){
            strCG[i] = alStrCG.get(i);
        }
        this.lstClubsGroups.removeAll();
        this.lstClubsGroups.setListData(strCG);

        // Restore selection
        this.lstClubsGroups.clearSelection();
        if (strSelGroup.length() > 0){
            ListModel lm = lstClubsGroups.getModel();
            for (int i = 0; i < lm.getSize(); i++){
                String cg = (String)lm.getElementAt(i);
                if (cg.equals(strSelGroup)){
                    lstClubsGroups.setSelectedIndex(i);
                }
            }
        }
        this.updateClubsInSelectedGroup();

        // Known clubs
        HashMap<String,String> hmClubs = new HashMap<String, String>();
        // Clubs from Rating lists
        ClubsList cl =  new ClubsList();
        RatingList rlEGF = new RatingList(RatingListType.EGF, new File(Gotha.runningDirectory, RatingListType.EGF.getFilename()));
        cl.importClubsFromRatingList(rlEGF);
//        RatingList rlFFG = new RatingList(RatingList.TYPE_FFG, new File(Gotha.runningDirectory, "ratinglists/ech_ffg_new.txt"));
        RatingList rlFFG = new RatingList(RatingListType.FFG, new File(Gotha.runningDirectory, RatingListType.FFG.getFilename()));
        cl.importClubsFromRatingList(rlFFG);
        RatingList rlAGA = new RatingList(RatingListType.AGA, new File(Gotha.runningDirectory, RatingListType.AGA.getFilename()));
        cl.importClubsFromRatingList(rlAGA);
        for(Club club : cl.getHmClubs().values()){
            hmClubs.put(club.getName(), club.getName());
        }

        // Clubs from players in the tournament
        ArrayList<Player> alP = tournament.playersList();
        for (Player p : alP){
            hmClubs.put(p.getClub(), p.getClub());
        }
        ArrayList<String> alClubs = new ArrayList<String>(hmClubs.values());

        Collections.sort(alClubs);
        String[] strClubs = new String[alClubs.size()];
        this.lstClubs.removeAll();

        for(int i = 0; i < strClubs.length; i++){
            strClubs[i] = alClubs.get(i);
        }

        this.lstClubs.setListData(strClubs);
    }

    private void updateClubsInSelectedGroup() throws RemoteException{
        lstClubsInSelectedGroup.setListData(new String[0]); // clear
        Object sel = lstClubsGroups.getSelectedValue();
        if (sel == null) return;
        String strSelectedGroup = (String)sel;
        ClubsGroup clubsGroup = tournament.getClubsGroupByName(strSelectedGroup);
        ArrayList<Club> alClubs = new ArrayList<Club>(clubsGroup.getHmClubs().values());
        ArrayList<String> alStrClubs = new ArrayList<String>();
        for(Club c : alClubs){
            alStrClubs.add(c.getName());
        }
        Collections.sort(alStrClubs);
        String[] strClubs = new String[alClubs.size()];
        for(int i = 0; i < strClubs.length; i++){
            strClubs[i] = alStrClubs.get(i);
        }

        this.lstClubsInSelectedGroup.removeAll();
        this.lstClubsInSelectedGroup.setListData(strClubs);
    }


    private void tournamentChanged(){
        try {
            tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateAllViews();
    }

    private void updateAllViews(){
        this.tpnParameters.setVisible(true);
        try {
            if (!tournament.isOpen()) cleanClose();
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
            setTitle(locale.format("tournament.options.window_title", tournament.getFullName()));
            updatePnlGen();
            updatePnlHan();
            updatePnlPla();
            updatePnlPai();
            updatePnlTPl();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private javax.swing.JButton btnAddClub;
    private javax.swing.JButton btnAddGroup;
    private javax.swing.JButton btnAdjustCategoryLimits;
    private javax.swing.JButton btnChangeSystem;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDlgChangeSystemCancel;
    private javax.swing.JButton btnDlgChangeSystemOK;
    private javax.swing.JButton btnDlgEditClubsGroupsClose;
    private javax.swing.JButton btnEditClubsGroups;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnRemoveClub;
    private javax.swing.JButton btnRemoveGroup;
    private javax.swing.JComboBox<String> cbxCrit1;
    private javax.swing.JComboBox<String> cbxCrit2;
    private javax.swing.JComboBox<String> cbxCrit3;
    private javax.swing.JComboBox<String> cbxCrit4;
    private javax.swing.JComboBox<String> cbxTeamCrit1;
    private javax.swing.JComboBox<String> cbxTeamCrit2;
    private javax.swing.JComboBox<String> cbxTeamCrit3;
    private javax.swing.JComboBox<String> cbxTeamCrit4;
    private javax.swing.JComboBox<String> cbxTeamCrit5;
    private javax.swing.JComboBox<String> cbxTeamCrit6;
    private javax.swing.JCheckBox ckbAddSortOnRating;
    private javax.swing.JCheckBox ckbAvoid2DUDD;
    private javax.swing.JCheckBox ckbAvoidMixingCategories;
    private javax.swing.JCheckBox ckbAvoidPairingSamePair;
    private javax.swing.JCheckBox ckbBalanceWB;
    private javax.swing.JCheckBox ckbCompensate;
    private javax.swing.JCheckBox ckbCountNPG;
    private javax.swing.JCheckBox ckbDeterministic;
    private javax.swing.JCheckBox ckbMinimizeScoreDifference;
    private javax.swing.JCheckBox ckbResetParameters;
    private javax.swing.JCheckBox ckbRoundDown;
    private javax.swing.JCheckBox ckbSeBarThresholdActive;
    private javax.swing.JCheckBox ckbSeMinimizeHandicap;
    private javax.swing.JCheckBox ckbSeNbWinsThresholdActive;
    private javax.swing.JDialog dlgChangeSystem;
    private javax.swing.JDialog dlgEditClubsGroups;
    private javax.swing.ButtonGroup grpAbsentMMS;
    private javax.swing.ButtonGroup grpAbsentNBW;
    private javax.swing.ButtonGroup grpByeMMS;
    private javax.swing.ButtonGroup grpByeNBW;
    private javax.swing.ButtonGroup grpDUDDLG;
    private javax.swing.ButtonGroup grpDUDDUG;
    private javax.swing.ButtonGroup grpHdBase;
    private javax.swing.ButtonGroup grpHdCorrection;
    private javax.swing.ButtonGroup grpNewSystem;
    private javax.swing.ButtonGroup grpRandom;
    private javax.swing.ButtonGroup grpSeedingFormer;
    private javax.swing.ButtonGroup grpSeedingLatter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblHandicap;
    private javax.swing.JLabel lblMMBar;
    private javax.swing.JLabel lblMMFloor;
    private javax.swing.JLabel lblMMZero;
    private javax.swing.JLabel lblNewSystem;
    private javax.swing.JLabel lblRecommended;
    private javax.swing.JLabel lblSystemName;
    private javax.swing.JList<String> lstClubs;
    private javax.swing.JList<String> lstClubsGroups;
    private javax.swing.JList<String> lstClubsInSelectedGroup;
    private javax.swing.JPanel pnlBase;
    private javax.swing.JPanel pnlCategories;
    private javax.swing.JPanel pnlDUDD;
    private javax.swing.JPanel pnlDUDDLG;
    private javax.swing.JPanel pnlDUDDUG;
    private javax.swing.JPanel pnlFormer;
    private javax.swing.JPanel pnlGen;
    private javax.swing.JPanel pnlGlossary;
    private javax.swing.JPanel pnlHan;
    private javax.swing.JPanel pnlHandicap;
    private javax.swing.JPanel pnlLatter;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlMcMahon;
    private javax.swing.JPanel pnlPai;
    private javax.swing.JPanel pnlPla;
    private javax.swing.JPanel pnlSecondary;
    private javax.swing.JPanel pnlSeeding;
    private javax.swing.JPanel pnlSpecialResults;
    private javax.swing.JPanel pnlTPL;
    private javax.swing.JPanel pnlTeamGlossary;
    private javax.swing.JPanel pnlTournamentDetails;
    private javax.swing.JRadioButton rdbAbsentMMS0;
    private javax.swing.JRadioButton rdbAbsentMMS1;
    private javax.swing.JRadioButton rdbAbsentMMS2;
    private javax.swing.JRadioButton rdbAbsentNBW0;
    private javax.swing.JRadioButton rdbAbsentNBW1;
    private javax.swing.JRadioButton rdbAbsentNBW2;
    private javax.swing.JRadioButton rdbAcceptRandom;
    private javax.swing.JRadioButton rdbByeMMS0;
    private javax.swing.JRadioButton rdbByeMMS1;
    private javax.swing.JRadioButton rdbByeMMS2;
    private javax.swing.JRadioButton rdbByeNBW0;
    private javax.swing.JRadioButton rdbByeNBW1;
    private javax.swing.JRadioButton rdbByeNBW2;
    private javax.swing.JRadioButton rdbDUDDLGBot;
    private javax.swing.JRadioButton rdbDUDDLGMid;
    private javax.swing.JRadioButton rdbDUDDLGTop;
    private javax.swing.JRadioButton rdbDUDDUGBot;
    private javax.swing.JRadioButton rdbDUDDUGMid;
    private javax.swing.JRadioButton rdbDUDDUGTop;
    private javax.swing.JRadioButton rdbFormerSplitAndFold;
    private javax.swing.JRadioButton rdbFormerSplitAndRandom;
    private javax.swing.JRadioButton rdbFormerSplitAndSlip;
    private javax.swing.JRadioButton rdbHdBaseMMS;
    private javax.swing.JRadioButton rdbHdBaseRank;
    private javax.swing.JRadioButton rdbHdCorrection0;
    private javax.swing.JRadioButton rdbHdCorrection1;
    private javax.swing.JRadioButton rdbHdCorrection2;
    private javax.swing.JRadioButton rdbHdCorrection3;
    private javax.swing.JRadioButton rdbHdCorrectionPlus1;
    private javax.swing.JRadioButton rdbLatterSplitAndFold;
    private javax.swing.JRadioButton rdbLatterSplitAndRandom;
    private javax.swing.JRadioButton rdbLatterSplitAndSlip;
    private javax.swing.JRadioButton rdbMcMahon;
    private javax.swing.JRadioButton rdbNoRandom;
    private javax.swing.JRadioButton rdbSwiss;
    private javax.swing.JRadioButton rdbSwissCat;
    private javax.swing.JScrollPane scpClubs;
    private javax.swing.JScrollPane scpClubsGroups;
    private javax.swing.JScrollPane scpClubsInSelectedGroup;
    private javax.swing.JScrollPane scpGlossary;
    private javax.swing.JScrollPane scpTeamGlossary;
    private javax.swing.JTable tblGlossary;
    private javax.swing.JTable tblTeamGlossary;
    private javax.swing.JTabbedPane tpnParameters;
    private javax.swing.JTextArea txaTeamWarning;
    private javax.swing.JTextArea txaWarning;
    private JDateChooser txfBeginDate;
    private javax.swing.JTextField txfDirector;
    private JDateChooser txfEndDate;
    private javax.swing.JTextField txfHdCeiling;
    private javax.swing.JTextField txfLastRoundForSeedSystem1;
    private javax.swing.JTextField txfLocation;
    private javax.swing.JTextField txfMMBar;
    private javax.swing.JTextField txfMMFloor;
    private javax.swing.JTextField txfMMZero;
    private javax.swing.JTextField txfName;
    private javax.swing.JTextField txfNoHdRankThreshold;
    private JSpinner txfNumberOfCategories;
    private JSpinner txfNumberOfRounds;
    private javax.swing.JTextField txfSeClub;
    private javax.swing.JTextField txfSeClubsGroup;
    private javax.swing.JTextField txfSeCountry;
    private javax.swing.JTextField txfSeRankThreshold;
    private javax.swing.JTextField txfShortName;

    JLabel[] tabLblCat;
    JTextField[] tabTxfLowerLimitOfCat;
    JLabel[] tabLblNbPlayersOfCat;
}
