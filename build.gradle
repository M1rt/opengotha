import org.apache.tools.ant.filters.EscapeUnicode

buildscript {
    ext.coroutines_version = '1.3.2'
    ext.serialization_version = '0.13.0'
    ext.ktor_version = '1.2.5'
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'application'
    id 'org.beryx.runtime' version '1.7.2'
}

version '3.46.04-RGF.1'

repositories {
    jcenter()
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

mainClassName = 'info.vannier.gotha.JFrGothaStart'

tasks.withType(ProcessResources).each { task ->
    task.from(task.getSource()) {
        include '**/*.properties'
        filter(EscapeUnicode)
    }
}

task createProperties {
    def version = project.version
    def outFile = file("${buildDir}/resources/main/build.properties")
    inputs.property 'version', version
    outputs.file outFile
    doLast {
        file("${buildDir}/resources/main").mkdirs()
        file(outFile).withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}
processResources.dependsOn createProperties

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('cd "`dirname \\"$PRG\\"`/.." >/dev/null', 'cd "`dirname \\"$PRG\\"`" >/dev/null')
        windowsScript.text =  windowsScript.text
            .replace('set APP_HOME=%DIRNAME%..', 'set APP_HOME=%DIRNAME%')
            .replace('set JAVA_HOME="%~dp0.."', 'set JAVA_HOME="%~dp0"')
        // See https://github.com/gradle/gradle/issues/4675
    }
}

distributions.main {
    contents {
        from startScripts
    }
}

distTar {
    compression = Compression.GZIP
}

def releaseSuffix = System.getenv('RELEASE_SUFFIX') ? System.getenv("RELEASE_SUFFIX") : ''

distZip {
    archiveFileName = "${rootProject.name}-jar-${project.version}${releaseSuffix}.zip"
}

runtime {
    options.set(['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'])
    modules.set(['java.desktop', 'java.rmi', 'jdk.crypto.ec'])
    imageDir = file("$buildDir/${rootProject.name}-${project.version}${releaseSuffix}")
    imageZip = file(file("${buildDir}/${rootProject.name}-${System.getProperty('os.name').split(' ').first()}-${project.version}${releaseSuffix}.zip"))
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

dependencies {
    implementation project(':core')
    implementation project(':rgf')
    implementation group: 'com.ibm.icu', name: 'icu4j', version: '60.2'
    implementation group: 'com.miglayout', name: 'miglayout-swing', version: '5.2'
    implementation group: 'com.sun.woodstock.dependlibs', name: 'jhall', version: '2.0'
    implementation group: 'com.toedter', name: 'jcalendar', version: '1.4'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-swing:$coroutines_version"
    implementation "io.github.microutils:kotlin-logging:$kotlin_logging_version"
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.slf4j:slf4j-jdk14:1.7.30'
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.3.2'
    testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.0.3'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.2'
}
